
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001166  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9b  00000000  00000000  00002cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d86  00000000  00000000  00003e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
       8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
       c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      40:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      48:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      4c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <LCD_write_char+0x1c>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 ec       	ldi	r30, 0xC2	; 194
      ea:	f1 e1       	ldi	r31, 0x11	; 17
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a0 36       	cpi	r26, 0x60	; 96
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>
      f8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
      fc:	0c 94 df 08 	jmp	0x11be	; 0x11be <_exit>

00000100 <__bad_interrupt>:
     100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <CALC_get_data>:
    }
	
}


uint8_t CALC_get_data(void) {
     104:	cf 93       	push	r28
	
	uint8_t key;
	
	while(KEYPAD_read() == -1){}
     106:	0e 94 73 03 	call	0x6e6	; 0x6e6 <KEYPAD_read>
     10a:	8f 3f       	cpi	r24, 0xFF	; 255
     10c:	e1 f3       	breq	.-8      	; 0x106 <CALC_get_data+0x2>
	key = KEYPAD_read();
     10e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <KEYPAD_read>
     112:	c8 2f       	mov	r28, r24
	while(KEYPAD_read() != -1){}
     114:	0e 94 73 03 	call	0x6e6	; 0x6e6 <KEYPAD_read>
     118:	8f 3f       	cpi	r24, 0xFF	; 255
     11a:	e1 f7       	brne	.-8      	; 0x114 <CALC_get_data+0x10>
	return key;
}
     11c:	8c 2f       	mov	r24, r28
     11e:	cf 91       	pop	r28
     120:	08 95       	ret

00000122 <GET_CALCULATION>:


float GET_CALCULATION(float a, uint8_t op, float b) {
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
	
	switch (op) {
     126:	4b 32       	cpi	r20, 0x2B	; 43
     128:	49 f0       	breq	.+18     	; 0x13c <GET_CALCULATION+0x1a>
     12a:	18 f4       	brcc	.+6      	; 0x132 <GET_CALCULATION+0x10>
     12c:	4a 32       	cpi	r20, 0x2A	; 42
     12e:	81 f0       	breq	.+32     	; 0x150 <GET_CALCULATION+0x2e>
     130:	19 c0       	rjmp	.+50     	; 0x164 <GET_CALCULATION+0x42>
     132:	4d 32       	cpi	r20, 0x2D	; 45
     134:	41 f0       	breq	.+16     	; 0x146 <GET_CALCULATION+0x24>
     136:	4f 32       	cpi	r20, 0x2F	; 47
     138:	81 f0       	breq	.+32     	; 0x15a <GET_CALCULATION+0x38>
     13a:	14 c0       	rjmp	.+40     	; 0x164 <GET_CALCULATION+0x42>
		case '+' : return (a + b);
     13c:	a9 01       	movw	r20, r18
     13e:	98 01       	movw	r18, r16
     140:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__addsf3>
     144:	12 c0       	rjmp	.+36     	; 0x16a <GET_CALCULATION+0x48>
		case '-' : return (a - b);
     146:	a9 01       	movw	r20, r18
     148:	98 01       	movw	r18, r16
     14a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__subsf3>
     14e:	0d c0       	rjmp	.+26     	; 0x16a <GET_CALCULATION+0x48>
		case '*' : return (a * b);
     150:	a9 01       	movw	r20, r18
     152:	98 01       	movw	r18, r16
     154:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
     158:	08 c0       	rjmp	.+16     	; 0x16a <GET_CALCULATION+0x48>
		case '/' : return (a / b);
     15a:	a9 01       	movw	r20, r18
     15c:	98 01       	movw	r18, r16
     15e:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
     162:	03 c0       	rjmp	.+6      	; 0x16a <GET_CALCULATION+0x48>
		default  : break;
	}
	
	return 0;
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	cb 01       	movw	r24, r22
}
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	08 95       	ret

00000170 <STRING_TO_FLOAT>:


float STRING_TO_FLOAT(uint8_t *str) {
     170:	4f 92       	push	r4
     172:	5f 92       	push	r5
     174:	6f 92       	push	r6
     176:	7f 92       	push	r7
     178:	8f 92       	push	r8
     17a:	9f 92       	push	r9
     17c:	af 92       	push	r10
     17e:	bf 92       	push	r11
     180:	cf 92       	push	r12
     182:	df 92       	push	r13
     184:	ef 92       	push	r14
     186:	ff 92       	push	r15
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	dc 01       	movw	r26, r24
	uint8_t i=0, dec_flag = 0, dec_start = 0;
	uint32_t num=0, dec=0;
     192:	c1 2c       	mov	r12, r1
     194:	d1 2c       	mov	r13, r1
     196:	76 01       	movw	r14, r12
	return 0;
}


float STRING_TO_FLOAT(uint8_t *str) {
	uint8_t i=0, dec_flag = 0, dec_start = 0;
     198:	e0 e0       	ldi	r30, 0x00	; 0
	uint32_t num=0, dec=0;
	
	while (str[i] != '\0') {
     19a:	27 c0       	rjmp	.+78     	; 0x1ea <STRING_TO_FLOAT+0x7a>
		if ((str[i] >= '0') && (str[i] <= '9')) {
     19c:	80 ed       	ldi	r24, 0xD0	; 208
     19e:	89 0f       	add	r24, r25
     1a0:	8a 30       	cpi	r24, 0x0A	; 10
     1a2:	00 f5       	brcc	.+64     	; 0x1e4 <STRING_TO_FLOAT+0x74>
     1a4:	b7 01       	movw	r22, r14
     1a6:	a6 01       	movw	r20, r12
     1a8:	44 0f       	add	r20, r20
     1aa:	55 1f       	adc	r21, r21
     1ac:	66 1f       	adc	r22, r22
     1ae:	77 1f       	adc	r23, r23
     1b0:	8a 01       	movw	r16, r20
     1b2:	9b 01       	movw	r18, r22
     1b4:	00 0f       	add	r16, r16
     1b6:	11 1f       	adc	r17, r17
     1b8:	22 1f       	adc	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	00 0f       	add	r16, r16
     1be:	11 1f       	adc	r17, r17
     1c0:	22 1f       	adc	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	40 0f       	add	r20, r16
     1c6:	51 1f       	adc	r21, r17
     1c8:	62 1f       	adc	r22, r18
     1ca:	73 1f       	adc	r23, r19
     1cc:	40 53       	subi	r20, 0x30	; 48
     1ce:	51 09       	sbc	r21, r1
     1d0:	61 09       	sbc	r22, r1
     1d2:	71 09       	sbc	r23, r1
			num = num*10 + str[i] -'0';
     1d4:	6a 01       	movw	r12, r20
     1d6:	7b 01       	movw	r14, r22
     1d8:	c9 0e       	add	r12, r25
     1da:	d1 1c       	adc	r13, r1
     1dc:	e1 1c       	adc	r14, r1
     1de:	f1 1c       	adc	r15, r1
			i++;
     1e0:	ef 5f       	subi	r30, 0xFF	; 255
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <STRING_TO_FLOAT+0x7a>
			} else if (str[i] == '.') {
     1e4:	9e 32       	cpi	r25, 0x2E	; 46
     1e6:	09 f4       	brne	.+2      	; 0x1ea <STRING_TO_FLOAT+0x7a>
     1e8:	57 c0       	rjmp	.+174    	; 0x298 <STRING_TO_FLOAT+0x128>

float STRING_TO_FLOAT(uint8_t *str) {
	uint8_t i=0, dec_flag = 0, dec_start = 0;
	uint32_t num=0, dec=0;
	
	while (str[i] != '\0') {
     1ea:	ed 01       	movw	r28, r26
     1ec:	ce 0f       	add	r28, r30
     1ee:	d1 1d       	adc	r29, r1
     1f0:	98 81       	ld	r25, Y
     1f2:	91 11       	cpse	r25, r1
     1f4:	d3 cf       	rjmp	.-90     	; 0x19c <STRING_TO_FLOAT+0x2c>
     1f6:	57 c0       	rjmp	.+174    	; 0x2a6 <STRING_TO_FLOAT+0x136>
	i++;
	dec_start = i;
	
	if (dec_flag == 1) {
		while (str[i] != '\0') {
			if ((str[i] >= '0') && (str[i] <= '9')) {
     1f8:	2a 30       	cpi	r18, 0x0A	; 10
     1fa:	10 f5       	brcc	.+68     	; 0x240 <STRING_TO_FLOAT+0xd0>
     1fc:	88 0c       	add	r8, r8
     1fe:	99 1c       	adc	r9, r9
     200:	aa 1c       	adc	r10, r10
     202:	bb 1c       	adc	r11, r11
     204:	b5 01       	movw	r22, r10
     206:	a4 01       	movw	r20, r8
     208:	44 0f       	add	r20, r20
     20a:	55 1f       	adc	r21, r21
     20c:	66 1f       	adc	r22, r22
     20e:	77 1f       	adc	r23, r23
     210:	44 0f       	add	r20, r20
     212:	55 1f       	adc	r21, r21
     214:	66 1f       	adc	r22, r22
     216:	77 1f       	adc	r23, r23
     218:	84 0e       	add	r8, r20
     21a:	95 1e       	adc	r9, r21
     21c:	a6 1e       	adc	r10, r22
     21e:	b7 1e       	adc	r11, r23
     220:	20 e3       	ldi	r18, 0x30	; 48
     222:	82 1a       	sub	r8, r18
     224:	91 08       	sbc	r9, r1
     226:	a1 08       	sbc	r10, r1
     228:	b1 08       	sbc	r11, r1
				dec = dec*10 + str[i] -'0';
     22a:	89 0e       	add	r8, r25
     22c:	91 1c       	adc	r9, r1
     22e:	a1 1c       	adc	r10, r1
     230:	b1 1c       	adc	r11, r1
				i++;
     232:	ef 5f       	subi	r30, 0xFF	; 255
	
	i++;
	dec_start = i;
	
	if (dec_flag == 1) {
		while (str[i] != '\0') {
     234:	ed 01       	movw	r28, r26
     236:	ce 0f       	add	r28, r30
     238:	d1 1d       	adc	r29, r1
     23a:	98 81       	ld	r25, Y
			if ((str[i] >= '0') && (str[i] <= '9')) {
     23c:	20 ed       	ldi	r18, 0xD0	; 208
     23e:	29 0f       	add	r18, r25
	
	i++;
	dec_start = i;
	
	if (dec_flag == 1) {
		while (str[i] != '\0') {
     240:	91 11       	cpse	r25, r1
     242:	da cf       	rjmp	.-76     	; 0x1f8 <STRING_TO_FLOAT+0x88>
				i++;
			}
		}
	}
	
	return (num+(float)dec/pow(10,i-dec_start));
     244:	6e 2f       	mov	r22, r30
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	fb 01       	movw	r30, r22
     24a:	e8 1b       	sub	r30, r24
     24c:	f1 09       	sbc	r31, r1
     24e:	bf 01       	movw	r22, r30
     250:	ff 0f       	add	r31, r31
     252:	88 0b       	sbc	r24, r24
     254:	99 0b       	sbc	r25, r25
     256:	0e 94 16 06 	call	0xc2c	; 0xc2c <__floatsisf>
     25a:	9b 01       	movw	r18, r22
     25c:	ac 01       	movw	r20, r24
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	80 e2       	ldi	r24, 0x20	; 32
     264:	91 e4       	ldi	r25, 0x41	; 65
     266:	0e 94 38 07 	call	0xe70	; 0xe70 <pow>
     26a:	2b 01       	movw	r4, r22
     26c:	3c 01       	movw	r6, r24
     26e:	c5 01       	movw	r24, r10
     270:	b4 01       	movw	r22, r8
     272:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
     276:	a3 01       	movw	r20, r6
     278:	92 01       	movw	r18, r4
     27a:	0e 94 6c 05 	call	0xad8	; 0xad8 <__divsf3>
     27e:	4b 01       	movw	r8, r22
     280:	5c 01       	movw	r10, r24
     282:	c7 01       	movw	r24, r14
     284:	b6 01       	movw	r22, r12
     286:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
     28a:	9b 01       	movw	r18, r22
     28c:	ac 01       	movw	r20, r24
     28e:	c5 01       	movw	r24, r10
     290:	b4 01       	movw	r22, r8
     292:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__addsf3>
     296:	0d c0       	rjmp	.+26     	; 0x2b2 <STRING_TO_FLOAT+0x142>
			dec_flag = 1;
			break;
		}
	}
	
	i++;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8e 0f       	add	r24, r30
     29c:	e8 2f       	mov	r30, r24
     29e:	81 2c       	mov	r8, r1
     2a0:	91 2c       	mov	r9, r1
     2a2:	54 01       	movw	r10, r8
     2a4:	c7 cf       	rjmp	.-114    	; 0x234 <STRING_TO_FLOAT+0xc4>
     2a6:	ef 5f       	subi	r30, 0xFF	; 255
     2a8:	8e 2f       	mov	r24, r30
}


float STRING_TO_FLOAT(uint8_t *str) {
	uint8_t i=0, dec_flag = 0, dec_start = 0;
	uint32_t num=0, dec=0;
     2aa:	81 2c       	mov	r8, r1
     2ac:	91 2c       	mov	r9, r1
     2ae:	54 01       	movw	r10, r8
     2b0:	c9 cf       	rjmp	.-110    	; 0x244 <STRING_TO_FLOAT+0xd4>
			}
		}
	}
	
	return (num+(float)dec/pow(10,i-dec_start));
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	0f 91       	pop	r16
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	9f 90       	pop	r9
     2c8:	8f 90       	pop	r8
     2ca:	7f 90       	pop	r7
     2cc:	6f 90       	pop	r6
     2ce:	5f 90       	pop	r5
     2d0:	4f 90       	pop	r4
     2d2:	08 95       	ret

000002d4 <main>:
float GET_CALCULATION(float, uint8_t, float);
float STRING_TO_FLOAT(uint8_t *);
uint8_t GET_DECIMAL_PLACES(float);

int main(void)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	c6 54       	subi	r28, 0x46	; 70
     2de:	d1 09       	sbc	r29, r1
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
	
	LCD_init();
     2ea:	0e 94 23 04 	call	0x846	; 0x846 <LCD_init>
	KEYPAD_init();
     2ee:	0e 94 6e 03 	call	0x6dc	; 0x6dc <KEYPAD_init>
			
			while (1) {
				KEY_DATA = CALC_get_data();
				if (((KEY_DATA >= '0') && (KEY_DATA <= '9')) || (KEY_DATA == '.'))  {
					LCD_write_char(KEY_DATA);
					number[i] = KEY_DATA;
     2f2:	7e 01       	movw	r14, r28
     2f4:	2b e0       	ldi	r18, 0x0B	; 11
     2f6:	e2 0e       	add	r14, r18
     2f8:	f1 1c       	adc	r15, r1
     2fa:	3e 01       	movw	r6, r28
     2fc:	35 e1       	ldi	r19, 0x15	; 21
     2fe:	63 0e       	add	r6, r19
     300:	71 1c       	adc	r7, r1
     302:	26 96       	adiw	r28, 0x06	; 6
     304:	ef ae       	std	Y+63, r14	; 0x3f
     306:	26 97       	sbiw	r28, 0x06	; 6
     308:	27 96       	adiw	r28, 0x07	; 7
     30a:	ff ae       	std	Y+63, r15	; 0x3f
     30c:	27 97       	sbiw	r28, 0x07	; 7
	float result;
	
	
    while (1) 
    {	
		counter = 0;
     30e:	51 2c       	mov	r5, r1
		result = 0;
		
		while(1) {
			
			i=0;
     310:	d1 2c       	mov	r13, r1
			
			while (1) {
				KEY_DATA = CALC_get_data();
     312:	0e 94 82 00 	call	0x104	; 0x104 <CALC_get_data>
     316:	18 2f       	mov	r17, r24
				if (((KEY_DATA >= '0') && (KEY_DATA <= '9')) || (KEY_DATA == '.'))  {
     318:	80 ed       	ldi	r24, 0xD0	; 208
     31a:	81 0f       	add	r24, r17
     31c:	8a 30       	cpi	r24, 0x0A	; 10
     31e:	10 f0       	brcs	.+4      	; 0x324 <main+0x50>
     320:	1e 32       	cpi	r17, 0x2E	; 46
     322:	49 f4       	brne	.+18     	; 0x336 <main+0x62>
					LCD_write_char(KEY_DATA);
     324:	81 2f       	mov	r24, r17
     326:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
					number[i] = KEY_DATA;
     32a:	f7 01       	movw	r30, r14
     32c:	ed 0d       	add	r30, r13
     32e:	f1 1d       	adc	r31, r1
     330:	10 83       	st	Z, r17
					i++;
     332:	d3 94       	inc	r13
				} else {
					break;
				}
			}
     334:	ee cf       	rjmp	.-36     	; 0x312 <main+0x3e>
						
			nums[counter] = STRING_TO_FLOAT(number);
     336:	c5 2c       	mov	r12, r5
     338:	d1 2c       	mov	r13, r1
     33a:	26 96       	adiw	r28, 0x06	; 6
     33c:	8f ad       	ldd	r24, Y+63	; 0x3f
     33e:	26 97       	sbiw	r28, 0x06	; 6
     340:	27 96       	adiw	r28, 0x07	; 7
     342:	9f ad       	ldd	r25, Y+63	; 0x3f
     344:	27 97       	sbiw	r28, 0x07	; 7
     346:	0e 94 b8 00 	call	0x170	; 0x170 <STRING_TO_FLOAT>
     34a:	f6 01       	movw	r30, r12
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	21 e0       	ldi	r18, 0x01	; 1
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	2c 0f       	add	r18, r28
     35a:	3d 1f       	adc	r19, r29
     35c:	e2 0f       	add	r30, r18
     35e:	f3 1f       	adc	r31, r19
     360:	64 8b       	std	Z+20, r22	; 0x14
     362:	75 8b       	std	Z+21, r23	; 0x15
     364:	86 8b       	std	Z+22, r24	; 0x16
     366:	97 8b       	std	Z+23, r25	; 0x17
     368:	f7 01       	movw	r30, r14
			
			for (i=0; i < (sizeof(number)/sizeof(number[0])); i++) {
				number[i] = 0;
     36a:	11 92       	st	Z+, r1
				}
			}
						
			nums[counter] = STRING_TO_FLOAT(number);
			
			for (i=0; i < (sizeof(number)/sizeof(number[0])); i++) {
     36c:	e6 15       	cp	r30, r6
     36e:	f7 05       	cpc	r31, r7
     370:	e1 f7       	brne	.-8      	; 0x36a <main+0x96>
				number[i] = 0;
			}
						
			if ((KEY_DATA == '+') || (KEY_DATA == '-') || (KEY_DATA == '*') || (KEY_DATA == '/')) {
     372:	81 2f       	mov	r24, r17
     374:	8d 7f       	andi	r24, 0xFD	; 253
     376:	8d 32       	cpi	r24, 0x2D	; 45
     378:	21 f0       	breq	.+8      	; 0x382 <main+0xae>
     37a:	86 ed       	ldi	r24, 0xD6	; 214
     37c:	81 0f       	add	r24, r17
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	58 f4       	brcc	.+22     	; 0x398 <main+0xc4>
				LCD_write_char(KEY_DATA);
     382:	81 2f       	mov	r24, r17
     384:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				op[counter] = KEY_DATA;
     388:	e1 e0       	ldi	r30, 0x01	; 1
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	ec 0f       	add	r30, r28
     38e:	fd 1f       	adc	r31, r29
     390:	ec 0d       	add	r30, r12
     392:	fd 1d       	adc	r31, r13
     394:	10 83       	st	Z, r17
     396:	0b c0       	rjmp	.+22     	; 0x3ae <main+0xda>
			} else if ((KEY_DATA == '=')) {
     398:	1d 33       	cpi	r17, 0x3D	; 61
     39a:	49 f4       	brne	.+18     	; 0x3ae <main+0xda>
				maxNums = counter;
				LCD_write_command(0xc0);
     39c:	80 ec       	ldi	r24, 0xC0	; 192
     39e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
				LCD_write_char(KEY_DATA);
     3a2:	8d e3       	ldi	r24, 0x3D	; 61
     3a4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				break;
			}
			counter++;
		}
		
		for (i = 0; (i < maxNums) ; i++) {
     3a8:	51 10       	cpse	r5, r1
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <main+0xde>
     3ac:	92 c1       	rjmp	.+804    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
				maxNums = counter;
				LCD_write_command(0xc0);
				LCD_write_char(KEY_DATA);
				break;
			}
			counter++;
     3ae:	53 94       	inc	r5
		}
     3b0:	af cf       	rjmp	.-162    	; 0x310 <main+0x3c>
     3b2:	5e 01       	movw	r10, r28
     3b4:	35 e1       	ldi	r19, 0x15	; 21
     3b6:	a3 0e       	add	r10, r19
     3b8:	b1 1c       	adc	r11, r1
     3ba:	4e 01       	movw	r8, r28
     3bc:	cc 24       	eor	r12, r12
     3be:	ca 94       	dec	r12
     3c0:	c5 0c       	add	r12, r5
     3c2:	d1 2c       	mov	r13, r1
     3c4:	44 24       	eor	r4, r4
     3c6:	43 94       	inc	r4
     3c8:	51 2c       	mov	r5, r1
     3ca:	4c 0e       	add	r4, r28
     3cc:	5d 1e       	adc	r5, r29
     3ce:	4c 0c       	add	r4, r12
     3d0:	5d 1c       	adc	r5, r13
     3d2:	14 01       	movw	r2, r8
		
		for (i = 0; (i < maxNums) ; i++) {
			if ((op[i] == '*') || (op[i] == '/')) {
     3d4:	f4 01       	movw	r30, r8
     3d6:	41 81       	ldd	r20, Z+1	; 0x01
     3d8:	4a 32       	cpi	r20, 0x2A	; 42
     3da:	11 f0       	breq	.+4      	; 0x3e0 <main+0x10c>
     3dc:	4f 32       	cpi	r20, 0x2F	; 47
     3de:	01 f5       	brne	.+64     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e0:	be ae       	std	Y+62, r11	; 0x3e
     3e2:	ad ae       	std	Y+61, r10	; 0x3d
				nums[i+1] = GET_CALCULATION(nums[i],op[i],nums[i+1]);
     3e4:	f5 01       	movw	r30, r10
     3e6:	04 81       	ldd	r16, Z+4	; 0x04
     3e8:	15 81       	ldd	r17, Z+5	; 0x05
     3ea:	26 81       	ldd	r18, Z+6	; 0x06
     3ec:	37 81       	ldd	r19, Z+7	; 0x07
     3ee:	60 81       	ld	r22, Z
     3f0:	71 81       	ldd	r23, Z+1	; 0x01
     3f2:	82 81       	ldd	r24, Z+2	; 0x02
     3f4:	93 81       	ldd	r25, Z+3	; 0x03
     3f6:	0e 94 91 00 	call	0x122	; 0x122 <GET_CALCULATION>
     3fa:	f5 01       	movw	r30, r10
     3fc:	64 83       	std	Z+4, r22	; 0x04
     3fe:	75 83       	std	Z+5, r23	; 0x05
     400:	86 83       	std	Z+6, r24	; 0x06
     402:	97 83       	std	Z+7, r25	; 0x07
				op[i] = '+';
     404:	2b e2       	ldi	r18, 0x2B	; 43
     406:	f1 01       	movw	r30, r2
     408:	21 83       	std	Z+1, r18	; 0x01
				if ( op[i-1] == '-' ) {
     40a:	80 81       	ld	r24, Z
     40c:	8d 32       	cpi	r24, 0x2D	; 45
     40e:	11 f4       	brne	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
					op[i] = '-';
     410:	3d e2       	ldi	r19, 0x2D	; 45
     412:	31 83       	std	Z+1, r19	; 0x01
				}
				nums[i] = 0;
     414:	ed ad       	ldd	r30, Y+61	; 0x3d
     416:	fe ad       	ldd	r31, Y+62	; 0x3e
     418:	10 82       	st	Z, r1
     41a:	11 82       	std	Z+1, r1	; 0x01
     41c:	12 82       	std	Z+2, r1	; 0x02
     41e:	13 82       	std	Z+3, r1	; 0x03
     420:	f4 e0       	ldi	r31, 0x04	; 4
     422:	af 0e       	add	r10, r31
     424:	b1 1c       	adc	r11, r1
     426:	2f ef       	ldi	r18, 0xFF	; 255
     428:	82 1a       	sub	r8, r18
     42a:	92 0a       	sbc	r9, r18
				break;
			}
			counter++;
		}
		
		for (i = 0; (i < maxNums) ; i++) {
     42c:	84 14       	cp	r8, r4
     42e:	95 04       	cpc	r9, r5
     430:	81 f6       	brne	.-96     	; 0x3d2 <main+0xfe>
     432:	3d c1       	rjmp	.+634    	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
		}
	
		result = nums[0];
	
		for (i = 0; (i < maxNums) ; i++) {
			result = GET_CALCULATION(result,op[i],nums[i+1]);
     434:	f1 01       	movw	r30, r2
     436:	01 91       	ld	r16, Z+
     438:	11 91       	ld	r17, Z+
     43a:	21 91       	ld	r18, Z+
     43c:	31 91       	ld	r19, Z+
     43e:	1f 01       	movw	r2, r30
     440:	f2 01       	movw	r30, r4
     442:	41 91       	ld	r20, Z+
     444:	2f 01       	movw	r4, r30
     446:	c5 01       	movw	r24, r10
     448:	b4 01       	movw	r22, r8
     44a:	0e 94 91 00 	call	0x122	; 0x122 <GET_CALCULATION>
     44e:	4b 01       	movw	r8, r22
     450:	5c 01       	movw	r10, r24
			}
		}
	
		result = nums[0];
	
		for (i = 0; (i < maxNums) ; i++) {
     452:	4c 14       	cp	r4, r12
     454:	5d 04       	cpc	r5, r13
     456:	71 f7       	brne	.-36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			result = GET_CALCULATION(result,op[i],nums[i+1]);
		}
		
		if (result < 0) {
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	a9 01       	movw	r20, r18
     45e:	c5 01       	movw	r24, r10
     460:	b4 01       	movw	r22, r8
     462:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     466:	88 23       	and	r24, r24
     468:	0c f0       	brlt	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	8d c0       	rjmp	.+282    	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
			if (result == (int32_t)result) {
     46c:	c5 01       	movw	r24, r10
     46e:	b4 01       	movw	r22, r8
     470:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fixsfsi>
     474:	0e 94 16 06 	call	0xc2c	; 0xc2c <__floatsisf>
     478:	a5 01       	movw	r20, r10
     47a:	94 01       	movw	r18, r8
     47c:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     480:	81 11       	cpse	r24, r1
     482:	24 c0       	rjmp	.+72     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				result = (-1) * result;
     484:	b7 fa       	bst	r11, 7
     486:	b0 94       	com	r11
     488:	b7 f8       	bld	r11, 7
     48a:	b0 94       	com	r11
				LCD_write_char('-');
     48c:	8d e2       	ldi	r24, 0x2D	; 45
     48e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				if ((result < 1) && (result > 0)) {
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5f e3       	ldi	r21, 0x3F	; 63
     49a:	c5 01       	movw	r24, r10
     49c:	b4 01       	movw	r22, r8
     49e:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     4a2:	88 23       	and	r24, r24
     4a4:	64 f4       	brge	.+24     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	a9 01       	movw	r20, r18
     4ac:	c5 01       	movw	r24, r10
     4ae:	b4 01       	movw	r22, r8
     4b0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
     4b4:	18 16       	cp	r1, r24
     4b6:	1c f4       	brge	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
					LCD_write_char('0');
     4b8:	80 e3       	ldi	r24, 0x30	; 48
     4ba:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number(result);
     4be:	c5 01       	movw	r24, r10
     4c0:	b4 01       	movw	r22, r8
     4c2:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     4c6:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
     4ca:	e9 c0       	rjmp	.+466    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			} else {
				result = (-1) * result;
     4cc:	b7 fa       	bst	r11, 7
     4ce:	b0 94       	com	r11
     4d0:	b7 f8       	bld	r11, 7
     4d2:	b0 94       	com	r11
				LCD_write_char('-');
     4d4:	8d e2       	ldi	r24, 0x2D	; 45
     4d6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				if ((result < 1) && (result > 0)) {
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e8       	ldi	r20, 0x80	; 128
     4e0:	5f e3       	ldi	r21, 0x3F	; 63
     4e2:	c5 01       	movw	r24, r10
     4e4:	b4 01       	movw	r22, r8
     4e6:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     4ea:	88 23       	and	r24, r24
     4ec:	64 f4       	brge	.+24     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	a9 01       	movw	r20, r18
     4f4:	c5 01       	movw	r24, r10
     4f6:	b4 01       	movw	r22, r8
     4f8:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
     4fc:	18 16       	cp	r1, r24
     4fe:	1c f4       	brge	.+6      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
					LCD_write_char('0');
     500:	80 e3       	ldi	r24, 0x30	; 48
     502:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number(result);
     506:	c5 01       	movw	r24, r10
     508:	b4 01       	movw	r22, r8
     50a:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     50e:	1b 01       	movw	r2, r22
     510:	2c 01       	movw	r4, r24
     512:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
				LCD_write_char('.');
     516:	8e e2       	ldi	r24, 0x2E	; 46
     518:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				if (((result-(uint32_t)result)*1000) < 10) {
     51c:	c2 01       	movw	r24, r4
     51e:	b1 01       	movw	r22, r2
     520:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	c5 01       	movw	r24, r10
     52a:	b4 01       	movw	r22, r8
     52c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__subsf3>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	4a e7       	ldi	r20, 0x7A	; 122
     536:	54 e4       	ldi	r21, 0x44	; 68
     538:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
     53c:	4b 01       	movw	r8, r22
     53e:	5c 01       	movw	r10, r24
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e2       	ldi	r20, 0x20	; 32
     546:	51 e4       	ldi	r21, 0x41	; 65
     548:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     54c:	88 23       	and	r24, r24
     54e:	3c f4       	brge	.+14     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
					LCD_write_char('0');
     550:	80 e3       	ldi	r24, 0x30	; 48
     552:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
					LCD_write_char('0');
     556:	80 e3       	ldi	r24, 0x30	; 48
     558:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
     55c:	0d c0       	rjmp	.+26     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
				} else if (((result-(uint32_t)result)*1000) < 100) {
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	48 ec       	ldi	r20, 0xC8	; 200
     564:	52 e4       	ldi	r21, 0x42	; 66
     566:	c5 01       	movw	r24, r10
     568:	b4 01       	movw	r22, r8
     56a:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     56e:	88 23       	and	r24, r24
     570:	1c f4       	brge	.+6      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
					LCD_write_char('0');
     572:	80 e3       	ldi	r24, 0x30	; 48
     574:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number((result-(uint32_t)result)*1000);
     578:	c5 01       	movw	r24, r10
     57a:	b4 01       	movw	r22, r8
     57c:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     580:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
     584:	8c c0       	rjmp	.+280    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			}
		} else {
			if (result == (uint32_t)result) {
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     58e:	21 96       	adiw	r28, 0x01	; 1
     590:	6c af       	std	Y+60, r22	; 0x3c
     592:	7d af       	std	Y+61, r23	; 0x3d
     594:	8e af       	std	Y+62, r24	; 0x3e
     596:	9f af       	std	Y+63, r25	; 0x3f
     598:	21 97       	sbiw	r28, 0x01	; 1
     59a:	0e 94 14 06 	call	0xc28	; 0xc28 <__floatunsisf>
     59e:	25 96       	adiw	r28, 0x05	; 5
     5a0:	6c af       	std	Y+60, r22	; 0x3c
     5a2:	7d af       	std	Y+61, r23	; 0x3d
     5a4:	8e af       	std	Y+62, r24	; 0x3e
     5a6:	9f af       	std	Y+63, r25	; 0x3f
     5a8:	25 97       	sbiw	r28, 0x05	; 5
     5aa:	a5 01       	movw	r20, r10
     5ac:	94 01       	movw	r18, r8
     5ae:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     5b2:	81 11       	cpse	r24, r1
     5b4:	1f c0       	rjmp	.+62     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
				if ((result < 1) && (result > 0)) {
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e8       	ldi	r20, 0x80	; 128
     5bc:	5f e3       	ldi	r21, 0x3F	; 63
     5be:	c5 01       	movw	r24, r10
     5c0:	b4 01       	movw	r22, r8
     5c2:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     5c6:	88 23       	and	r24, r24
     5c8:	64 f4       	brge	.+24     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	a9 01       	movw	r20, r18
     5d0:	c5 01       	movw	r24, r10
     5d2:	b4 01       	movw	r22, r8
     5d4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
     5d8:	18 16       	cp	r1, r24
     5da:	1c f4       	brge	.+6      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
					LCD_write_char('0');
     5dc:	80 e3       	ldi	r24, 0x30	; 48
     5de:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number(result);
     5e2:	21 96       	adiw	r28, 0x01	; 1
     5e4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5e6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5e8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ea:	9f ad       	ldd	r25, Y+63	; 0x3f
     5ec:	21 97       	sbiw	r28, 0x01	; 1
     5ee:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
     5f2:	55 c0       	rjmp	.+170    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
			} else {
				if ((result < 1) && (result > 0)) {
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	c5 01       	movw	r24, r10
     5fe:	b4 01       	movw	r22, r8
     600:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     604:	88 23       	and	r24, r24
     606:	64 f4       	brge	.+24     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	a9 01       	movw	r20, r18
     60e:	c5 01       	movw	r24, r10
     610:	b4 01       	movw	r22, r8
     612:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__gesf2>
     616:	18 16       	cp	r1, r24
     618:	1c f4       	brge	.+6      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
					LCD_write_char('0');
     61a:	80 e3       	ldi	r24, 0x30	; 48
     61c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number(result);
     620:	21 96       	adiw	r28, 0x01	; 1
     622:	6c ad       	ldd	r22, Y+60	; 0x3c
     624:	7d ad       	ldd	r23, Y+61	; 0x3d
     626:	8e ad       	ldd	r24, Y+62	; 0x3e
     628:	9f ad       	ldd	r25, Y+63	; 0x3f
     62a:	21 97       	sbiw	r28, 0x01	; 1
     62c:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
				LCD_write_char('.');
     630:	8e e2       	ldi	r24, 0x2E	; 46
     632:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				if (((result-(uint32_t)result)*1000) < 10) {
     636:	25 96       	adiw	r28, 0x05	; 5
     638:	2c ad       	ldd	r18, Y+60	; 0x3c
     63a:	3d ad       	ldd	r19, Y+61	; 0x3d
     63c:	4e ad       	ldd	r20, Y+62	; 0x3e
     63e:	5f ad       	ldd	r21, Y+63	; 0x3f
     640:	25 97       	sbiw	r28, 0x05	; 5
     642:	c5 01       	movw	r24, r10
     644:	b4 01       	movw	r22, r8
     646:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__subsf3>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	4a e7       	ldi	r20, 0x7A	; 122
     650:	54 e4       	ldi	r21, 0x44	; 68
     652:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
     656:	4b 01       	movw	r8, r22
     658:	5c 01       	movw	r10, r24
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e2       	ldi	r20, 0x20	; 32
     660:	51 e4       	ldi	r21, 0x41	; 65
     662:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     666:	88 23       	and	r24, r24
     668:	3c f4       	brge	.+14     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
					LCD_write_char('0');
     66a:	80 e3       	ldi	r24, 0x30	; 48
     66c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
					LCD_write_char('0');
     670:	80 e3       	ldi	r24, 0x30	; 48
     672:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
     676:	0d c0       	rjmp	.+26     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
				} else if (((result-(uint32_t)result)*1000) < 100) {
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 ec       	ldi	r20, 0xC8	; 200
     67e:	52 e4       	ldi	r21, 0x42	; 66
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	0e 94 67 05 	call	0xace	; 0xace <__cmpsf2>
     688:	88 23       	and	r24, r24
     68a:	1c f4       	brge	.+6      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
					LCD_write_char('0');
     68c:	80 e3       	ldi	r24, 0x30	; 48
     68e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
				}
				LCD_write_number((result-(uint32_t)result)*1000);
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     69a:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_write_number>
			}
		}
				
		while(1) {
			KEY_DATA = CALC_get_data();
     69e:	0e 94 82 00 	call	0x104	; 0x104 <CALC_get_data>
			if (KEY_DATA == '.') {
     6a2:	8e 32       	cpi	r24, 0x2E	; 46
     6a4:	e1 f7       	brne	.-8      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
				LCD_write_command(1);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
				break;
			}
		}
		
    }
     6ac:	30 ce       	rjmp	.-928    	; 0x30e <main+0x3a>
				}
				nums[i] = 0;
			}
		}
	
		result = nums[0];
     6ae:	8d 88       	ldd	r8, Y+21	; 0x15
     6b0:	9e 88       	ldd	r9, Y+22	; 0x16
     6b2:	af 88       	ldd	r10, Y+23	; 0x17
     6b4:	b8 8c       	ldd	r11, Y+24	; 0x18
     6b6:	1e 01       	movw	r2, r28
     6b8:	f9 e1       	ldi	r31, 0x19	; 25
     6ba:	2f 0e       	add	r2, r31
     6bc:	31 1c       	adc	r3, r1
     6be:	9e 01       	movw	r18, r28
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	29 01       	movw	r4, r18
     6c6:	3f ef       	ldi	r19, 0xFF	; 255
     6c8:	c3 1a       	sub	r12, r19
     6ca:	d3 0a       	sbc	r13, r19
     6cc:	c4 0c       	add	r12, r4
     6ce:	d5 1c       	adc	r13, r5
     6d0:	b1 ce       	rjmp	.-670    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     6d2:	8d 88       	ldd	r8, Y+21	; 0x15
     6d4:	9e 88       	ldd	r9, Y+22	; 0x16
     6d6:	af 88       	ldd	r10, Y+23	; 0x17
     6d8:	b8 8c       	ldd	r11, Y+24	; 0x18
     6da:	be ce       	rjmp	.-644    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

000006dc <KEYPAD_init>:
	'1','2','3','-',
	'.','0','=','+'
};

void KEYPAD_init(void) {
	INIT_KEYPAD_PINS();
     6dc:	80 ef       	ldi	r24, 0xF0	; 240
     6de:	84 bb       	out	0x14, r24	; 20
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	85 bb       	out	0x15, r24	; 21
     6e4:	08 95       	ret

000006e6 <KEYPAD_read>:
}

int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
     6e6:	ac 98       	cbi	0x15, 4	; 21
     6e8:	ad 9a       	sbi	0x15, 5	; 21
     6ea:	ae 9a       	sbi	0x15, 6	; 21
     6ec:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[0];
     6ee:	98 9b       	sbis	0x13, 0	; 19
     6f0:	44 c0       	rjmp	.+136    	; 0x77a <KEYPAD_read+0x94>
	if(K1() == 0) return KEYPAD_matrix[1];
     6f2:	99 9b       	sbis	0x13, 1	; 19
     6f4:	44 c0       	rjmp	.+136    	; 0x77e <KEYPAD_read+0x98>
	if(K2() == 0) return KEYPAD_matrix[2];
     6f6:	9a 9b       	sbis	0x13, 2	; 19
     6f8:	44 c0       	rjmp	.+136    	; 0x782 <KEYPAD_read+0x9c>
	if(K3() == 0) return KEYPAD_matrix[3];
     6fa:	9b 9b       	sbis	0x13, 3	; 19
     6fc:	44 c0       	rjmp	.+136    	; 0x786 <KEYPAD_read+0xa0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fe:	8f e1       	ldi	r24, 0x1F	; 31
     700:	9e e4       	ldi	r25, 0x4E	; 78
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <KEYPAD_read+0x1c>
     706:	00 c0       	rjmp	.+0      	; 0x708 <KEYPAD_read+0x22>
     708:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
     70a:	ac 9a       	sbi	0x15, 4	; 21
     70c:	ad 98       	cbi	0x15, 5	; 21
     70e:	ae 9a       	sbi	0x15, 6	; 21
     710:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[4];
     712:	98 9b       	sbis	0x13, 0	; 19
     714:	3a c0       	rjmp	.+116    	; 0x78a <KEYPAD_read+0xa4>
	if(K1() == 0) return KEYPAD_matrix[5];
     716:	99 9b       	sbis	0x13, 1	; 19
     718:	3a c0       	rjmp	.+116    	; 0x78e <KEYPAD_read+0xa8>
	if(K2() == 0) return KEYPAD_matrix[6];
     71a:	9a 9b       	sbis	0x13, 2	; 19
     71c:	3a c0       	rjmp	.+116    	; 0x792 <KEYPAD_read+0xac>
	if(K3() == 0) return KEYPAD_matrix[7];
     71e:	9b 9b       	sbis	0x13, 3	; 19
     720:	3a c0       	rjmp	.+116    	; 0x796 <KEYPAD_read+0xb0>
     722:	8f e1       	ldi	r24, 0x1F	; 31
     724:	9e e4       	ldi	r25, 0x4E	; 78
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <KEYPAD_read+0x40>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <KEYPAD_read+0x46>
     72c:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
     72e:	ac 9a       	sbi	0x15, 4	; 21
     730:	ad 9a       	sbi	0x15, 5	; 21
     732:	ae 98       	cbi	0x15, 6	; 21
     734:	af 9a       	sbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[8];
     736:	98 9b       	sbis	0x13, 0	; 19
     738:	30 c0       	rjmp	.+96     	; 0x79a <KEYPAD_read+0xb4>
	if(K1() == 0) return KEYPAD_matrix[9];
     73a:	99 9b       	sbis	0x13, 1	; 19
     73c:	30 c0       	rjmp	.+96     	; 0x79e <KEYPAD_read+0xb8>
	if(K2() == 0) return KEYPAD_matrix[10];
     73e:	9a 9b       	sbis	0x13, 2	; 19
     740:	30 c0       	rjmp	.+96     	; 0x7a2 <KEYPAD_read+0xbc>
	if(K3() == 0) return KEYPAD_matrix[11];
     742:	9b 9b       	sbis	0x13, 3	; 19
     744:	30 c0       	rjmp	.+96     	; 0x7a6 <KEYPAD_read+0xc0>
     746:	8f e1       	ldi	r24, 0x1F	; 31
     748:	9e e4       	ldi	r25, 0x4E	; 78
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <KEYPAD_read+0x64>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <KEYPAD_read+0x6a>
     750:	00 00       	nop
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
     752:	ac 9a       	sbi	0x15, 4	; 21
     754:	ad 9a       	sbi	0x15, 5	; 21
     756:	ae 9a       	sbi	0x15, 6	; 21
     758:	af 98       	cbi	0x15, 7	; 21
	if(K0() == 0) return KEYPAD_matrix[12];
     75a:	98 9b       	sbis	0x13, 0	; 19
     75c:	26 c0       	rjmp	.+76     	; 0x7aa <KEYPAD_read+0xc4>
	if(K1() == 0) return KEYPAD_matrix[13];
     75e:	99 9b       	sbis	0x13, 1	; 19
     760:	26 c0       	rjmp	.+76     	; 0x7ae <KEYPAD_read+0xc8>
	if(K2() == 0) return KEYPAD_matrix[14];
     762:	9a 9b       	sbis	0x13, 2	; 19
     764:	26 c0       	rjmp	.+76     	; 0x7b2 <KEYPAD_read+0xcc>
	if(K3() == 0) return KEYPAD_matrix[15];
     766:	9b 9b       	sbis	0x13, 3	; 19
     768:	26 c0       	rjmp	.+76     	; 0x7b6 <KEYPAD_read+0xd0>
     76a:	8f e1       	ldi	r24, 0x1F	; 31
     76c:	9e e4       	ldi	r25, 0x4E	; 78
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <KEYPAD_read+0x88>
     772:	00 c0       	rjmp	.+0      	; 0x774 <KEYPAD_read+0x8e>
     774:	00 00       	nop
	_delay_ms(5);
	
	return -1;
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	08 95       	ret
	INIT_KEYPAD_PINS();
}

int8_t KEYPAD_read(void) {
	K4(0);K5(1);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[0];
     77a:	87 e3       	ldi	r24, 0x37	; 55
     77c:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[1];
     77e:	88 e3       	ldi	r24, 0x38	; 56
     780:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[2];
     782:	89 e3       	ldi	r24, 0x39	; 57
     784:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[3];
     786:	8f e2       	ldi	r24, 0x2F	; 47
     788:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(0);K6(1);K7(1);
	if(K0() == 0) return KEYPAD_matrix[4];
     78a:	84 e3       	ldi	r24, 0x34	; 52
     78c:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[5];
     78e:	85 e3       	ldi	r24, 0x35	; 53
     790:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[6];
     792:	86 e3       	ldi	r24, 0x36	; 54
     794:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[7];
     796:	8a e2       	ldi	r24, 0x2A	; 42
     798:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(0);K7(1);
	if(K0() == 0) return KEYPAD_matrix[8];
     79a:	81 e3       	ldi	r24, 0x31	; 49
     79c:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[9];
     79e:	82 e3       	ldi	r24, 0x32	; 50
     7a0:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[10];
     7a2:	83 e3       	ldi	r24, 0x33	; 51
     7a4:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[11];
     7a6:	8d e2       	ldi	r24, 0x2D	; 45
     7a8:	08 95       	ret
	_delay_ms(5);
	
	K4(1);K5(1);K6(1);K7(0);
	if(K0() == 0) return KEYPAD_matrix[12];
     7aa:	8e e2       	ldi	r24, 0x2E	; 46
     7ac:	08 95       	ret
	if(K1() == 0) return KEYPAD_matrix[13];
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	08 95       	ret
	if(K2() == 0) return KEYPAD_matrix[14];
     7b2:	8d e3       	ldi	r24, 0x3D	; 61
     7b4:	08 95       	ret
	if(K3() == 0) return KEYPAD_matrix[15];
     7b6:	8b e2       	ldi	r24, 0x2B	; 43
	_delay_ms(5);
	
	return -1;
     7b8:	08 95       	ret

000007ba <LCD_write_command>:

	for(i = 0; (data[i] != '\0'); i++) {
		LCD_write_char(data[i]);
	}
	
}
     7ba:	da 98       	cbi	0x1b, 2	; 27
     7bc:	88 23       	and	r24, r24
     7be:	14 f4       	brge	.+4      	; 0x7c4 <LCD_write_command+0xa>
     7c0:	df 9a       	sbi	0x1b, 7	; 27
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <LCD_write_command+0xc>
     7c4:	df 98       	cbi	0x1b, 7	; 27
     7c6:	86 ff       	sbrs	r24, 6
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <LCD_write_command+0x14>
     7ca:	de 9a       	sbi	0x1b, 6	; 27
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <LCD_write_command+0x16>
     7ce:	de 98       	cbi	0x1b, 6	; 27
     7d0:	85 ff       	sbrs	r24, 5
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <LCD_write_command+0x1e>
     7d4:	dd 9a       	sbi	0x1b, 5	; 27
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <LCD_write_command+0x20>
     7d8:	dd 98       	cbi	0x1b, 5	; 27
     7da:	84 ff       	sbrs	r24, 4
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <LCD_write_command+0x28>
     7de:	dc 9a       	sbi	0x1b, 4	; 27
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <LCD_write_command+0x2a>
     7e2:	dc 98       	cbi	0x1b, 4	; 27
     7e4:	db 9a       	sbi	0x1b, 3	; 27
     7e6:	ef e9       	ldi	r30, 0x9F	; 159
     7e8:	ff e0       	ldi	r31, 0x0F	; 15
     7ea:	31 97       	sbiw	r30, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <LCD_write_command+0x30>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <LCD_write_command+0x36>
     7f0:	00 00       	nop
     7f2:	db 98       	cbi	0x1b, 3	; 27
     7f4:	ef e9       	ldi	r30, 0x9F	; 159
     7f6:	ff e0       	ldi	r31, 0x0F	; 15
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <LCD_write_command+0x3e>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <LCD_write_command+0x44>
     7fe:	00 00       	nop
     800:	83 ff       	sbrs	r24, 3
     802:	02 c0       	rjmp	.+4      	; 0x808 <LCD_write_command+0x4e>
     804:	df 9a       	sbi	0x1b, 7	; 27
     806:	01 c0       	rjmp	.+2      	; 0x80a <LCD_write_command+0x50>
     808:	df 98       	cbi	0x1b, 7	; 27
     80a:	82 ff       	sbrs	r24, 2
     80c:	02 c0       	rjmp	.+4      	; 0x812 <LCD_write_command+0x58>
     80e:	de 9a       	sbi	0x1b, 6	; 27
     810:	01 c0       	rjmp	.+2      	; 0x814 <LCD_write_command+0x5a>
     812:	de 98       	cbi	0x1b, 6	; 27
     814:	81 ff       	sbrs	r24, 1
     816:	02 c0       	rjmp	.+4      	; 0x81c <LCD_write_command+0x62>
     818:	dd 9a       	sbi	0x1b, 5	; 27
     81a:	01 c0       	rjmp	.+2      	; 0x81e <LCD_write_command+0x64>
     81c:	dd 98       	cbi	0x1b, 5	; 27
     81e:	80 ff       	sbrs	r24, 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <LCD_write_command+0x6c>
     822:	dc 9a       	sbi	0x1b, 4	; 27
     824:	01 c0       	rjmp	.+2      	; 0x828 <LCD_write_command+0x6e>
     826:	dc 98       	cbi	0x1b, 4	; 27
     828:	db 9a       	sbi	0x1b, 3	; 27
     82a:	8f e9       	ldi	r24, 0x9F	; 159
     82c:	9f e0       	ldi	r25, 0x0F	; 15
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <LCD_write_command+0x74>
     832:	00 c0       	rjmp	.+0      	; 0x834 <LCD_write_command+0x7a>
     834:	00 00       	nop
     836:	db 98       	cbi	0x1b, 3	; 27
     838:	ef e9       	ldi	r30, 0x9F	; 159
     83a:	ff e0       	ldi	r31, 0x0F	; 15
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <LCD_write_command+0x82>
     840:	00 c0       	rjmp	.+0      	; 0x842 <LCD_write_command+0x88>
     842:	00 00       	nop
     844:	08 95       	ret

00000846 <LCD_init>:
     846:	8a b3       	in	r24, 0x1a	; 26
     848:	8c 6f       	ori	r24, 0xFC	; 252
     84a:	8a bb       	out	0x1a, r24	; 26
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     852:	8f e7       	ldi	r24, 0x7F	; 127
     854:	9e e3       	ldi	r25, 0x3E	; 62
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <LCD_init+0x10>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <LCD_init+0x16>
     85c:	00 00       	nop
     85e:	83 e0       	ldi	r24, 0x03	; 3
     860:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     864:	8f e7       	ldi	r24, 0x7F	; 127
     866:	9e e3       	ldi	r25, 0x3E	; 62
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     876:	8f e7       	ldi	r24, 0x7F	; 127
     878:	9e e3       	ldi	r25, 0x3E	; 62
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <__stack+0x1b>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
     880:	00 00       	nop
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     888:	88 e2       	ldi	r24, 0x28	; 40
     88a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     89a:	8c e0       	ldi	r24, 0x0C	; 12
     89c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <LCD_write_command>
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	29 ef       	ldi	r18, 0xF9	; 249
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	91 50       	subi	r25, 0x01	; 1
     8a8:	20 40       	sbci	r18, 0x00	; 0
     8aa:	80 40       	sbci	r24, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
     8b0:	00 00       	nop
     8b2:	08 95       	ret

000008b4 <LCD_write_char>:
     8b4:	da 9a       	sbi	0x1b, 2	; 27
     8b6:	88 23       	and	r24, r24
     8b8:	14 f4       	brge	.+4      	; 0x8be <LCD_write_char+0xa>
     8ba:	df 9a       	sbi	0x1b, 7	; 27
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <LCD_write_char+0xc>
     8be:	df 98       	cbi	0x1b, 7	; 27
     8c0:	86 ff       	sbrs	r24, 6
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <LCD_write_char+0x14>
     8c4:	de 9a       	sbi	0x1b, 6	; 27
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <LCD_write_char+0x16>
     8c8:	de 98       	cbi	0x1b, 6	; 27
     8ca:	85 ff       	sbrs	r24, 5
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <LCD_write_char+0x1e>
     8ce:	dd 9a       	sbi	0x1b, 5	; 27
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <LCD_write_char+0x20>
     8d2:	dd 98       	cbi	0x1b, 5	; 27
     8d4:	84 ff       	sbrs	r24, 4
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <LCD_write_char+0x28>
     8d8:	dc 9a       	sbi	0x1b, 4	; 27
     8da:	01 c0       	rjmp	.+2      	; 0x8de <LCD_write_char+0x2a>
     8dc:	dc 98       	cbi	0x1b, 4	; 27
     8de:	db 9a       	sbi	0x1b, 3	; 27
     8e0:	ef e9       	ldi	r30, 0x9F	; 159
     8e2:	ff e0       	ldi	r31, 0x0F	; 15
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <LCD_write_char+0x30>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <LCD_write_char+0x36>
     8ea:	00 00       	nop
     8ec:	db 98       	cbi	0x1b, 3	; 27
     8ee:	ef e9       	ldi	r30, 0x9F	; 159
     8f0:	ff e0       	ldi	r31, 0x0F	; 15
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <LCD_write_char+0x3e>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <LCD_write_char+0x44>
     8f8:	00 00       	nop
     8fa:	83 ff       	sbrs	r24, 3
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <LCD_write_char+0x4e>
     8fe:	df 9a       	sbi	0x1b, 7	; 27
     900:	01 c0       	rjmp	.+2      	; 0x904 <LCD_write_char+0x50>
     902:	df 98       	cbi	0x1b, 7	; 27
     904:	82 ff       	sbrs	r24, 2
     906:	02 c0       	rjmp	.+4      	; 0x90c <LCD_write_char+0x58>
     908:	de 9a       	sbi	0x1b, 6	; 27
     90a:	01 c0       	rjmp	.+2      	; 0x90e <LCD_write_char+0x5a>
     90c:	de 98       	cbi	0x1b, 6	; 27
     90e:	81 ff       	sbrs	r24, 1
     910:	02 c0       	rjmp	.+4      	; 0x916 <LCD_write_char+0x62>
     912:	dd 9a       	sbi	0x1b, 5	; 27
     914:	01 c0       	rjmp	.+2      	; 0x918 <LCD_write_char+0x64>
     916:	dd 98       	cbi	0x1b, 5	; 27
     918:	80 ff       	sbrs	r24, 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <LCD_write_char+0x6c>
     91c:	dc 9a       	sbi	0x1b, 4	; 27
     91e:	01 c0       	rjmp	.+2      	; 0x922 <LCD_write_char+0x6e>
     920:	dc 98       	cbi	0x1b, 4	; 27
     922:	db 9a       	sbi	0x1b, 3	; 27
     924:	8f e9       	ldi	r24, 0x9F	; 159
     926:	9f e0       	ldi	r25, 0x0F	; 15
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <LCD_write_char+0x74>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <LCD_write_char+0x7a>
     92e:	00 00       	nop
     930:	db 98       	cbi	0x1b, 3	; 27
     932:	ef e9       	ldi	r30, 0x9F	; 159
     934:	ff e0       	ldi	r31, 0x0F	; 15
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <LCD_write_char+0x82>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <LCD_write_char+0x88>
     93c:	00 00       	nop
     93e:	08 95       	ret

00000940 <LCD_write_number>:
* Function Name: LCD_write_number
* Purpose      : Write number to LCD
* Parameters   : number
* Return value : void
*****************************************************************************/
void LCD_write_number(uint32_t data) {
     940:	8f 92       	push	r8
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	2a 97       	sbiw	r28, 0x0a	; 10
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	a1 f1       	breq	.+104    	; 0x9d4 <LCD_write_number+0x94>
     96c:	10 e0       	ldi	r17, 0x00	; 0
		str[i] = data%10;
     96e:	0f 2e       	mov	r0, r31
     970:	fa e0       	ldi	r31, 0x0A	; 10
     972:	8f 2e       	mov	r8, r31
     974:	91 2c       	mov	r9, r1
     976:	a1 2c       	mov	r10, r1
     978:	b1 2c       	mov	r11, r1
     97a:	f0 2d       	mov	r31, r0
     97c:	01 c0       	rjmp	.+2      	; 0x980 <LCD_write_number+0x40>
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
     97e:	12 2f       	mov	r17, r18
		str[i] = data%10;
     980:	ee 24       	eor	r14, r14
     982:	e3 94       	inc	r14
     984:	f1 2c       	mov	r15, r1
     986:	ec 0e       	add	r14, r28
     988:	fd 1e       	adc	r15, r29
     98a:	e1 0e       	add	r14, r17
     98c:	f1 1c       	adc	r15, r1
     98e:	17 fd       	sbrc	r17, 7
     990:	fa 94       	dec	r15
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	0e 94 bd 08 	call	0x117a	; 0x117a <__udivmodsi4>
     99a:	f7 01       	movw	r30, r14
     99c:	60 83       	st	Z, r22
		data = data/10;
     99e:	62 2f       	mov	r22, r18
     9a0:	73 2f       	mov	r23, r19
     9a2:	84 2f       	mov	r24, r20
     9a4:	95 2f       	mov	r25, r21
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	21 0f       	add	r18, r17
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
     9aa:	61 15       	cp	r22, r1
     9ac:	71 05       	cpc	r23, r1
     9ae:	81 05       	cpc	r24, r1
     9b0:	91 05       	cpc	r25, r1
     9b2:	29 f7       	brne	.-54     	; 0x97e <LCD_write_number+0x3e>
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
     9b4:	11 23       	and	r17, r17
     9b6:	74 f0       	brlt	.+28     	; 0x9d4 <LCD_write_number+0x94>
		LCD_write_char(str[i]+48);
     9b8:	e1 e0       	ldi	r30, 0x01	; 1
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ec 0f       	add	r30, r28
     9be:	fd 1f       	adc	r31, r29
     9c0:	e1 0f       	add	r30, r17
     9c2:	f1 1d       	adc	r31, r1
     9c4:	17 fd       	sbrc	r17, 7
     9c6:	fa 95       	dec	r31
     9c8:	80 81       	ld	r24, Z
     9ca:	80 5d       	subi	r24, 0xD0	; 208
     9cc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <LCD_write_char>
     9d0:	11 50       	subi	r17, 0x01	; 1
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
     9d2:	92 f7       	brpl	.-28     	; 0x9b8 <LCD_write_number+0x78>
		LCD_write_char(str[i]+48);
	}
	
     9d4:	2a 96       	adiw	r28, 0x0a	; 10
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	bf 90       	pop	r11
     9ec:	af 90       	pop	r10
     9ee:	9f 90       	pop	r9
     9f0:	8f 90       	pop	r8
     9f2:	08 95       	ret

000009f4 <__subsf3>:
     9f4:	50 58       	subi	r21, 0x80	; 128

000009f6 <__addsf3>:
     9f6:	bb 27       	eor	r27, r27
     9f8:	aa 27       	eor	r26, r26
     9fa:	0e 94 12 05 	call	0xa24	; 0xa24 <__addsf3x>
     9fe:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
     a02:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
     a06:	38 f0       	brcs	.+14     	; 0xa16 <__addsf3+0x20>
     a08:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
     a0c:	20 f0       	brcs	.+8      	; 0xa16 <__addsf3+0x20>
     a0e:	39 f4       	brne	.+14     	; 0xa1e <__addsf3+0x28>
     a10:	9f 3f       	cpi	r25, 0xFF	; 255
     a12:	19 f4       	brne	.+6      	; 0xa1a <__addsf3+0x24>
     a14:	26 f4       	brtc	.+8      	; 0xa1e <__addsf3+0x28>
     a16:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
     a1a:	0e f4       	brtc	.+2      	; 0xa1e <__addsf3+0x28>
     a1c:	e0 95       	com	r30
     a1e:	e7 fb       	bst	r30, 7
     a20:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>

00000a24 <__addsf3x>:
     a24:	e9 2f       	mov	r30, r25
     a26:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
     a2a:	58 f3       	brcs	.-42     	; 0xa02 <__addsf3+0xc>
     a2c:	ba 17       	cp	r27, r26
     a2e:	62 07       	cpc	r22, r18
     a30:	73 07       	cpc	r23, r19
     a32:	84 07       	cpc	r24, r20
     a34:	95 07       	cpc	r25, r21
     a36:	20 f0       	brcs	.+8      	; 0xa40 <__addsf3x+0x1c>
     a38:	79 f4       	brne	.+30     	; 0xa58 <__addsf3x+0x34>
     a3a:	a6 f5       	brtc	.+104    	; 0xaa4 <__addsf3x+0x80>
     a3c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
     a40:	0e f4       	brtc	.+2      	; 0xa44 <__addsf3x+0x20>
     a42:	e0 95       	com	r30
     a44:	0b 2e       	mov	r0, r27
     a46:	ba 2f       	mov	r27, r26
     a48:	a0 2d       	mov	r26, r0
     a4a:	0b 01       	movw	r0, r22
     a4c:	b9 01       	movw	r22, r18
     a4e:	90 01       	movw	r18, r0
     a50:	0c 01       	movw	r0, r24
     a52:	ca 01       	movw	r24, r20
     a54:	a0 01       	movw	r20, r0
     a56:	11 24       	eor	r1, r1
     a58:	ff 27       	eor	r31, r31
     a5a:	59 1b       	sub	r21, r25
     a5c:	99 f0       	breq	.+38     	; 0xa84 <__addsf3x+0x60>
     a5e:	59 3f       	cpi	r21, 0xF9	; 249
     a60:	50 f4       	brcc	.+20     	; 0xa76 <__addsf3x+0x52>
     a62:	50 3e       	cpi	r21, 0xE0	; 224
     a64:	68 f1       	brcs	.+90     	; 0xac0 <__addsf3x+0x9c>
     a66:	1a 16       	cp	r1, r26
     a68:	f0 40       	sbci	r31, 0x00	; 0
     a6a:	a2 2f       	mov	r26, r18
     a6c:	23 2f       	mov	r18, r19
     a6e:	34 2f       	mov	r19, r20
     a70:	44 27       	eor	r20, r20
     a72:	58 5f       	subi	r21, 0xF8	; 248
     a74:	f3 cf       	rjmp	.-26     	; 0xa5c <__addsf3x+0x38>
     a76:	46 95       	lsr	r20
     a78:	37 95       	ror	r19
     a7a:	27 95       	ror	r18
     a7c:	a7 95       	ror	r26
     a7e:	f0 40       	sbci	r31, 0x00	; 0
     a80:	53 95       	inc	r21
     a82:	c9 f7       	brne	.-14     	; 0xa76 <__addsf3x+0x52>
     a84:	7e f4       	brtc	.+30     	; 0xaa4 <__addsf3x+0x80>
     a86:	1f 16       	cp	r1, r31
     a88:	ba 0b       	sbc	r27, r26
     a8a:	62 0b       	sbc	r22, r18
     a8c:	73 0b       	sbc	r23, r19
     a8e:	84 0b       	sbc	r24, r20
     a90:	ba f0       	brmi	.+46     	; 0xac0 <__addsf3x+0x9c>
     a92:	91 50       	subi	r25, 0x01	; 1
     a94:	a1 f0       	breq	.+40     	; 0xabe <__addsf3x+0x9a>
     a96:	ff 0f       	add	r31, r31
     a98:	bb 1f       	adc	r27, r27
     a9a:	66 1f       	adc	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	c2 f7       	brpl	.-16     	; 0xa92 <__addsf3x+0x6e>
     aa2:	0e c0       	rjmp	.+28     	; 0xac0 <__addsf3x+0x9c>
     aa4:	ba 0f       	add	r27, r26
     aa6:	62 1f       	adc	r22, r18
     aa8:	73 1f       	adc	r23, r19
     aaa:	84 1f       	adc	r24, r20
     aac:	48 f4       	brcc	.+18     	; 0xac0 <__addsf3x+0x9c>
     aae:	87 95       	ror	r24
     ab0:	77 95       	ror	r23
     ab2:	67 95       	ror	r22
     ab4:	b7 95       	ror	r27
     ab6:	f7 95       	ror	r31
     ab8:	9e 3f       	cpi	r25, 0xFE	; 254
     aba:	08 f0       	brcs	.+2      	; 0xabe <__addsf3x+0x9a>
     abc:	b0 cf       	rjmp	.-160    	; 0xa1e <__addsf3+0x28>
     abe:	93 95       	inc	r25
     ac0:	88 0f       	add	r24, r24
     ac2:	08 f0       	brcs	.+2      	; 0xac6 <__addsf3x+0xa2>
     ac4:	99 27       	eor	r25, r25
     ac6:	ee 0f       	add	r30, r30
     ac8:	97 95       	ror	r25
     aca:	87 95       	ror	r24
     acc:	08 95       	ret

00000ace <__cmpsf2>:
     ace:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_cmp>
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__cmpsf2+0x8>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	08 95       	ret

00000ad8 <__divsf3>:
     ad8:	0e 94 80 05 	call	0xb00	; 0xb00 <__divsf3x>
     adc:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
     ae0:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
     ae4:	58 f0       	brcs	.+22     	; 0xafc <__divsf3+0x24>
     ae6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
     aea:	40 f0       	brcs	.+16     	; 0xafc <__divsf3+0x24>
     aec:	29 f4       	brne	.+10     	; 0xaf8 <__divsf3+0x20>
     aee:	5f 3f       	cpi	r21, 0xFF	; 255
     af0:	29 f0       	breq	.+10     	; 0xafc <__divsf3+0x24>
     af2:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     af6:	51 11       	cpse	r21, r1
     af8:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
     afc:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>

00000b00 <__divsf3x>:
     b00:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
     b04:	68 f3       	brcs	.-38     	; 0xae0 <__divsf3+0x8>

00000b06 <__divsf3_pse>:
     b06:	99 23       	and	r25, r25
     b08:	b1 f3       	breq	.-20     	; 0xaf6 <__divsf3+0x1e>
     b0a:	55 23       	and	r21, r21
     b0c:	91 f3       	breq	.-28     	; 0xaf2 <__divsf3+0x1a>
     b0e:	95 1b       	sub	r25, r21
     b10:	55 0b       	sbc	r21, r21
     b12:	bb 27       	eor	r27, r27
     b14:	aa 27       	eor	r26, r26
     b16:	62 17       	cp	r22, r18
     b18:	73 07       	cpc	r23, r19
     b1a:	84 07       	cpc	r24, r20
     b1c:	38 f0       	brcs	.+14     	; 0xb2c <__divsf3_pse+0x26>
     b1e:	9f 5f       	subi	r25, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	44 1f       	adc	r20, r20
     b28:	aa 1f       	adc	r26, r26
     b2a:	a9 f3       	breq	.-22     	; 0xb16 <__divsf3_pse+0x10>
     b2c:	35 d0       	rcall	.+106    	; 0xb98 <__divsf3_pse+0x92>
     b2e:	0e 2e       	mov	r0, r30
     b30:	3a f0       	brmi	.+14     	; 0xb40 <__divsf3_pse+0x3a>
     b32:	e0 e8       	ldi	r30, 0x80	; 128
     b34:	32 d0       	rcall	.+100    	; 0xb9a <__divsf3_pse+0x94>
     b36:	91 50       	subi	r25, 0x01	; 1
     b38:	50 40       	sbci	r21, 0x00	; 0
     b3a:	e6 95       	lsr	r30
     b3c:	00 1c       	adc	r0, r0
     b3e:	ca f7       	brpl	.-14     	; 0xb32 <__divsf3_pse+0x2c>
     b40:	2b d0       	rcall	.+86     	; 0xb98 <__divsf3_pse+0x92>
     b42:	fe 2f       	mov	r31, r30
     b44:	29 d0       	rcall	.+82     	; 0xb98 <__divsf3_pse+0x92>
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	88 1f       	adc	r24, r24
     b4c:	bb 1f       	adc	r27, r27
     b4e:	26 17       	cp	r18, r22
     b50:	37 07       	cpc	r19, r23
     b52:	48 07       	cpc	r20, r24
     b54:	ab 07       	cpc	r26, r27
     b56:	b0 e8       	ldi	r27, 0x80	; 128
     b58:	09 f0       	breq	.+2      	; 0xb5c <__divsf3_pse+0x56>
     b5a:	bb 0b       	sbc	r27, r27
     b5c:	80 2d       	mov	r24, r0
     b5e:	bf 01       	movw	r22, r30
     b60:	ff 27       	eor	r31, r31
     b62:	93 58       	subi	r25, 0x83	; 131
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	3a f0       	brmi	.+14     	; 0xb76 <__divsf3_pse+0x70>
     b68:	9e 3f       	cpi	r25, 0xFE	; 254
     b6a:	51 05       	cpc	r21, r1
     b6c:	78 f0       	brcs	.+30     	; 0xb8c <__divsf3_pse+0x86>
     b6e:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     b72:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
     b76:	5f 3f       	cpi	r21, 0xFF	; 255
     b78:	e4 f3       	brlt	.-8      	; 0xb72 <__divsf3_pse+0x6c>
     b7a:	98 3e       	cpi	r25, 0xE8	; 232
     b7c:	d4 f3       	brlt	.-12     	; 0xb72 <__divsf3_pse+0x6c>
     b7e:	86 95       	lsr	r24
     b80:	77 95       	ror	r23
     b82:	67 95       	ror	r22
     b84:	b7 95       	ror	r27
     b86:	f7 95       	ror	r31
     b88:	9f 5f       	subi	r25, 0xFF	; 255
     b8a:	c9 f7       	brne	.-14     	; 0xb7e <__divsf3_pse+0x78>
     b8c:	88 0f       	add	r24, r24
     b8e:	91 1d       	adc	r25, r1
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret
     b98:	e1 e0       	ldi	r30, 0x01	; 1
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	88 1f       	adc	r24, r24
     ba0:	bb 1f       	adc	r27, r27
     ba2:	62 17       	cp	r22, r18
     ba4:	73 07       	cpc	r23, r19
     ba6:	84 07       	cpc	r24, r20
     ba8:	ba 07       	cpc	r27, r26
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <__divsf3_pse+0xae>
     bac:	62 1b       	sub	r22, r18
     bae:	73 0b       	sbc	r23, r19
     bb0:	84 0b       	sbc	r24, r20
     bb2:	ba 0b       	sbc	r27, r26
     bb4:	ee 1f       	adc	r30, r30
     bb6:	88 f7       	brcc	.-30     	; 0xb9a <__divsf3_pse+0x94>
     bb8:	e0 95       	com	r30
     bba:	08 95       	ret

00000bbc <__fixsfsi>:
     bbc:	0e 94 e5 05 	call	0xbca	; 0xbca <__fixunssfsi>
     bc0:	68 94       	set
     bc2:	b1 11       	cpse	r27, r1
     bc4:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
     bc8:	08 95       	ret

00000bca <__fixunssfsi>:
     bca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
     bce:	88 f0       	brcs	.+34     	; 0xbf2 <__fixunssfsi+0x28>
     bd0:	9f 57       	subi	r25, 0x7F	; 127
     bd2:	98 f0       	brcs	.+38     	; 0xbfa <__fixunssfsi+0x30>
     bd4:	b9 2f       	mov	r27, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	b7 51       	subi	r27, 0x17	; 23
     bda:	b0 f0       	brcs	.+44     	; 0xc08 <__fixunssfsi+0x3e>
     bdc:	e1 f0       	breq	.+56     	; 0xc16 <__fixunssfsi+0x4c>
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	88 1f       	adc	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	1a f0       	brmi	.+6      	; 0xbee <__fixunssfsi+0x24>
     be8:	ba 95       	dec	r27
     bea:	c9 f7       	brne	.-14     	; 0xbde <__fixunssfsi+0x14>
     bec:	14 c0       	rjmp	.+40     	; 0xc16 <__fixunssfsi+0x4c>
     bee:	b1 30       	cpi	r27, 0x01	; 1
     bf0:	91 f0       	breq	.+36     	; 0xc16 <__fixunssfsi+0x4c>
     bf2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_zero>
     bf6:	b1 e0       	ldi	r27, 0x01	; 1
     bf8:	08 95       	ret
     bfa:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
     bfe:	67 2f       	mov	r22, r23
     c00:	78 2f       	mov	r23, r24
     c02:	88 27       	eor	r24, r24
     c04:	b8 5f       	subi	r27, 0xF8	; 248
     c06:	39 f0       	breq	.+14     	; 0xc16 <__fixunssfsi+0x4c>
     c08:	b9 3f       	cpi	r27, 0xF9	; 249
     c0a:	cc f3       	brlt	.-14     	; 0xbfe <__fixunssfsi+0x34>
     c0c:	86 95       	lsr	r24
     c0e:	77 95       	ror	r23
     c10:	67 95       	ror	r22
     c12:	b3 95       	inc	r27
     c14:	d9 f7       	brne	.-10     	; 0xc0c <__fixunssfsi+0x42>
     c16:	3e f4       	brtc	.+14     	; 0xc26 <__fixunssfsi+0x5c>
     c18:	90 95       	com	r25
     c1a:	80 95       	com	r24
     c1c:	70 95       	com	r23
     c1e:	61 95       	neg	r22
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	8f 4f       	sbci	r24, 0xFF	; 255
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	08 95       	ret

00000c28 <__floatunsisf>:
     c28:	e8 94       	clt
     c2a:	09 c0       	rjmp	.+18     	; 0xc3e <__floatsisf+0x12>

00000c2c <__floatsisf>:
     c2c:	97 fb       	bst	r25, 7
     c2e:	3e f4       	brtc	.+14     	; 0xc3e <__floatsisf+0x12>
     c30:	90 95       	com	r25
     c32:	80 95       	com	r24
     c34:	70 95       	com	r23
     c36:	61 95       	neg	r22
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	8f 4f       	sbci	r24, 0xFF	; 255
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	99 23       	and	r25, r25
     c40:	a9 f0       	breq	.+42     	; 0xc6c <__floatsisf+0x40>
     c42:	f9 2f       	mov	r31, r25
     c44:	96 e9       	ldi	r25, 0x96	; 150
     c46:	bb 27       	eor	r27, r27
     c48:	93 95       	inc	r25
     c4a:	f6 95       	lsr	r31
     c4c:	87 95       	ror	r24
     c4e:	77 95       	ror	r23
     c50:	67 95       	ror	r22
     c52:	b7 95       	ror	r27
     c54:	f1 11       	cpse	r31, r1
     c56:	f8 cf       	rjmp	.-16     	; 0xc48 <__floatsisf+0x1c>
     c58:	fa f4       	brpl	.+62     	; 0xc98 <__floatsisf+0x6c>
     c5a:	bb 0f       	add	r27, r27
     c5c:	11 f4       	brne	.+4      	; 0xc62 <__floatsisf+0x36>
     c5e:	60 ff       	sbrs	r22, 0
     c60:	1b c0       	rjmp	.+54     	; 0xc98 <__floatsisf+0x6c>
     c62:	6f 5f       	subi	r22, 0xFF	; 255
     c64:	7f 4f       	sbci	r23, 0xFF	; 255
     c66:	8f 4f       	sbci	r24, 0xFF	; 255
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	16 c0       	rjmp	.+44     	; 0xc98 <__floatsisf+0x6c>
     c6c:	88 23       	and	r24, r24
     c6e:	11 f0       	breq	.+4      	; 0xc74 <__floatsisf+0x48>
     c70:	96 e9       	ldi	r25, 0x96	; 150
     c72:	11 c0       	rjmp	.+34     	; 0xc96 <__floatsisf+0x6a>
     c74:	77 23       	and	r23, r23
     c76:	21 f0       	breq	.+8      	; 0xc80 <__floatsisf+0x54>
     c78:	9e e8       	ldi	r25, 0x8E	; 142
     c7a:	87 2f       	mov	r24, r23
     c7c:	76 2f       	mov	r23, r22
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__floatsisf+0x5e>
     c80:	66 23       	and	r22, r22
     c82:	71 f0       	breq	.+28     	; 0xca0 <__floatsisf+0x74>
     c84:	96 e8       	ldi	r25, 0x86	; 134
     c86:	86 2f       	mov	r24, r22
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	2a f0       	brmi	.+10     	; 0xc98 <__floatsisf+0x6c>
     c8e:	9a 95       	dec	r25
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	da f7       	brpl	.-10     	; 0xc8e <__floatsisf+0x62>
     c98:	88 0f       	add	r24, r24
     c9a:	96 95       	lsr	r25
     c9c:	87 95       	ror	r24
     c9e:	97 f9       	bld	r25, 7
     ca0:	08 95       	ret

00000ca2 <__fp_cmp>:
     ca2:	99 0f       	add	r25, r25
     ca4:	00 08       	sbc	r0, r0
     ca6:	55 0f       	add	r21, r21
     ca8:	aa 0b       	sbc	r26, r26
     caa:	e0 e8       	ldi	r30, 0x80	; 128
     cac:	fe ef       	ldi	r31, 0xFE	; 254
     cae:	16 16       	cp	r1, r22
     cb0:	17 06       	cpc	r1, r23
     cb2:	e8 07       	cpc	r30, r24
     cb4:	f9 07       	cpc	r31, r25
     cb6:	c0 f0       	brcs	.+48     	; 0xce8 <__fp_cmp+0x46>
     cb8:	12 16       	cp	r1, r18
     cba:	13 06       	cpc	r1, r19
     cbc:	e4 07       	cpc	r30, r20
     cbe:	f5 07       	cpc	r31, r21
     cc0:	98 f0       	brcs	.+38     	; 0xce8 <__fp_cmp+0x46>
     cc2:	62 1b       	sub	r22, r18
     cc4:	73 0b       	sbc	r23, r19
     cc6:	84 0b       	sbc	r24, r20
     cc8:	95 0b       	sbc	r25, r21
     cca:	39 f4       	brne	.+14     	; 0xcda <__fp_cmp+0x38>
     ccc:	0a 26       	eor	r0, r26
     cce:	61 f0       	breq	.+24     	; 0xce8 <__fp_cmp+0x46>
     cd0:	23 2b       	or	r18, r19
     cd2:	24 2b       	or	r18, r20
     cd4:	25 2b       	or	r18, r21
     cd6:	21 f4       	brne	.+8      	; 0xce0 <__fp_cmp+0x3e>
     cd8:	08 95       	ret
     cda:	0a 26       	eor	r0, r26
     cdc:	09 f4       	brne	.+2      	; 0xce0 <__fp_cmp+0x3e>
     cde:	a1 40       	sbci	r26, 0x01	; 1
     ce0:	a6 95       	lsr	r26
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	81 1d       	adc	r24, r1
     ce6:	81 1d       	adc	r24, r1
     ce8:	08 95       	ret

00000cea <__fp_inf>:
     cea:	97 f9       	bld	r25, 7
     cec:	9f 67       	ori	r25, 0x7F	; 127
     cee:	80 e8       	ldi	r24, 0x80	; 128
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	08 95       	ret

00000cf6 <__fp_nan>:
     cf6:	9f ef       	ldi	r25, 0xFF	; 255
     cf8:	80 ec       	ldi	r24, 0xC0	; 192
     cfa:	08 95       	ret

00000cfc <__fp_pscA>:
     cfc:	00 24       	eor	r0, r0
     cfe:	0a 94       	dec	r0
     d00:	16 16       	cp	r1, r22
     d02:	17 06       	cpc	r1, r23
     d04:	18 06       	cpc	r1, r24
     d06:	09 06       	cpc	r0, r25
     d08:	08 95       	ret

00000d0a <__fp_pscB>:
     d0a:	00 24       	eor	r0, r0
     d0c:	0a 94       	dec	r0
     d0e:	12 16       	cp	r1, r18
     d10:	13 06       	cpc	r1, r19
     d12:	14 06       	cpc	r1, r20
     d14:	05 06       	cpc	r0, r21
     d16:	08 95       	ret

00000d18 <__fp_round>:
     d18:	09 2e       	mov	r0, r25
     d1a:	03 94       	inc	r0
     d1c:	00 0c       	add	r0, r0
     d1e:	11 f4       	brne	.+4      	; 0xd24 <__fp_round+0xc>
     d20:	88 23       	and	r24, r24
     d22:	52 f0       	brmi	.+20     	; 0xd38 <__fp_round+0x20>
     d24:	bb 0f       	add	r27, r27
     d26:	40 f4       	brcc	.+16     	; 0xd38 <__fp_round+0x20>
     d28:	bf 2b       	or	r27, r31
     d2a:	11 f4       	brne	.+4      	; 0xd30 <__fp_round+0x18>
     d2c:	60 ff       	sbrs	r22, 0
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__fp_round+0x20>
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	8f 4f       	sbci	r24, 0xFF	; 255
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	08 95       	ret

00000d3a <__fp_split3>:
     d3a:	57 fd       	sbrc	r21, 7
     d3c:	90 58       	subi	r25, 0x80	; 128
     d3e:	44 0f       	add	r20, r20
     d40:	55 1f       	adc	r21, r21
     d42:	59 f0       	breq	.+22     	; 0xd5a <__fp_splitA+0x10>
     d44:	5f 3f       	cpi	r21, 0xFF	; 255
     d46:	71 f0       	breq	.+28     	; 0xd64 <__fp_splitA+0x1a>
     d48:	47 95       	ror	r20

00000d4a <__fp_splitA>:
     d4a:	88 0f       	add	r24, r24
     d4c:	97 fb       	bst	r25, 7
     d4e:	99 1f       	adc	r25, r25
     d50:	61 f0       	breq	.+24     	; 0xd6a <__fp_splitA+0x20>
     d52:	9f 3f       	cpi	r25, 0xFF	; 255
     d54:	79 f0       	breq	.+30     	; 0xd74 <__fp_splitA+0x2a>
     d56:	87 95       	ror	r24
     d58:	08 95       	ret
     d5a:	12 16       	cp	r1, r18
     d5c:	13 06       	cpc	r1, r19
     d5e:	14 06       	cpc	r1, r20
     d60:	55 1f       	adc	r21, r21
     d62:	f2 cf       	rjmp	.-28     	; 0xd48 <__fp_split3+0xe>
     d64:	46 95       	lsr	r20
     d66:	f1 df       	rcall	.-30     	; 0xd4a <__fp_splitA>
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <__fp_splitA+0x30>
     d6a:	16 16       	cp	r1, r22
     d6c:	17 06       	cpc	r1, r23
     d6e:	18 06       	cpc	r1, r24
     d70:	99 1f       	adc	r25, r25
     d72:	f1 cf       	rjmp	.-30     	; 0xd56 <__fp_splitA+0xc>
     d74:	86 95       	lsr	r24
     d76:	71 05       	cpc	r23, r1
     d78:	61 05       	cpc	r22, r1
     d7a:	08 94       	sec
     d7c:	08 95       	ret

00000d7e <__fp_zero>:
     d7e:	e8 94       	clt

00000d80 <__fp_szero>:
     d80:	bb 27       	eor	r27, r27
     d82:	66 27       	eor	r22, r22
     d84:	77 27       	eor	r23, r23
     d86:	cb 01       	movw	r24, r22
     d88:	97 f9       	bld	r25, 7
     d8a:	08 95       	ret

00000d8c <__gesf2>:
     d8c:	0e 94 51 06 	call	0xca2	; 0xca2 <__fp_cmp>
     d90:	08 f4       	brcc	.+2      	; 0xd94 <__gesf2+0x8>
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	08 95       	ret

00000d96 <__mulsf3>:
     d96:	0e 94 de 06 	call	0xdbc	; 0xdbc <__mulsf3x>
     d9a:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>
     d9e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fp_pscA>
     da2:	38 f0       	brcs	.+14     	; 0xdb2 <__mulsf3+0x1c>
     da4:	0e 94 85 06 	call	0xd0a	; 0xd0a <__fp_pscB>
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__mulsf3+0x1c>
     daa:	95 23       	and	r25, r21
     dac:	11 f0       	breq	.+4      	; 0xdb2 <__mulsf3+0x1c>
     dae:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     db2:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
     db6:	11 24       	eor	r1, r1
     db8:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>

00000dbc <__mulsf3x>:
     dbc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_split3>
     dc0:	70 f3       	brcs	.-36     	; 0xd9e <__mulsf3+0x8>

00000dc2 <__mulsf3_pse>:
     dc2:	95 9f       	mul	r25, r21
     dc4:	c1 f3       	breq	.-16     	; 0xdb6 <__mulsf3+0x20>
     dc6:	95 0f       	add	r25, r21
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	55 1f       	adc	r21, r21
     dcc:	62 9f       	mul	r22, r18
     dce:	f0 01       	movw	r30, r0
     dd0:	72 9f       	mul	r23, r18
     dd2:	bb 27       	eor	r27, r27
     dd4:	f0 0d       	add	r31, r0
     dd6:	b1 1d       	adc	r27, r1
     dd8:	63 9f       	mul	r22, r19
     dda:	aa 27       	eor	r26, r26
     ddc:	f0 0d       	add	r31, r0
     dde:	b1 1d       	adc	r27, r1
     de0:	aa 1f       	adc	r26, r26
     de2:	64 9f       	mul	r22, r20
     de4:	66 27       	eor	r22, r22
     de6:	b0 0d       	add	r27, r0
     de8:	a1 1d       	adc	r26, r1
     dea:	66 1f       	adc	r22, r22
     dec:	82 9f       	mul	r24, r18
     dee:	22 27       	eor	r18, r18
     df0:	b0 0d       	add	r27, r0
     df2:	a1 1d       	adc	r26, r1
     df4:	62 1f       	adc	r22, r18
     df6:	73 9f       	mul	r23, r19
     df8:	b0 0d       	add	r27, r0
     dfa:	a1 1d       	adc	r26, r1
     dfc:	62 1f       	adc	r22, r18
     dfe:	83 9f       	mul	r24, r19
     e00:	a0 0d       	add	r26, r0
     e02:	61 1d       	adc	r22, r1
     e04:	22 1f       	adc	r18, r18
     e06:	74 9f       	mul	r23, r20
     e08:	33 27       	eor	r19, r19
     e0a:	a0 0d       	add	r26, r0
     e0c:	61 1d       	adc	r22, r1
     e0e:	23 1f       	adc	r18, r19
     e10:	84 9f       	mul	r24, r20
     e12:	60 0d       	add	r22, r0
     e14:	21 1d       	adc	r18, r1
     e16:	82 2f       	mov	r24, r18
     e18:	76 2f       	mov	r23, r22
     e1a:	6a 2f       	mov	r22, r26
     e1c:	11 24       	eor	r1, r1
     e1e:	9f 57       	subi	r25, 0x7F	; 127
     e20:	50 40       	sbci	r21, 0x00	; 0
     e22:	9a f0       	brmi	.+38     	; 0xe4a <__mulsf3_pse+0x88>
     e24:	f1 f0       	breq	.+60     	; 0xe62 <__mulsf3_pse+0xa0>
     e26:	88 23       	and	r24, r24
     e28:	4a f0       	brmi	.+18     	; 0xe3c <__mulsf3_pse+0x7a>
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	bb 1f       	adc	r27, r27
     e30:	66 1f       	adc	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	50 40       	sbci	r21, 0x00	; 0
     e3a:	a9 f7       	brne	.-22     	; 0xe26 <__mulsf3_pse+0x64>
     e3c:	9e 3f       	cpi	r25, 0xFE	; 254
     e3e:	51 05       	cpc	r21, r1
     e40:	80 f0       	brcs	.+32     	; 0xe62 <__mulsf3_pse+0xa0>
     e42:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     e46:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
     e4a:	5f 3f       	cpi	r21, 0xFF	; 255
     e4c:	e4 f3       	brlt	.-8      	; 0xe46 <__mulsf3_pse+0x84>
     e4e:	98 3e       	cpi	r25, 0xE8	; 232
     e50:	d4 f3       	brlt	.-12     	; 0xe46 <__mulsf3_pse+0x84>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f7 95       	ror	r31
     e5c:	e7 95       	ror	r30
     e5e:	9f 5f       	subi	r25, 0xFF	; 255
     e60:	c1 f7       	brne	.-16     	; 0xe52 <__mulsf3_pse+0x90>
     e62:	fe 2b       	or	r31, r30
     e64:	88 0f       	add	r24, r24
     e66:	91 1d       	adc	r25, r1
     e68:	96 95       	lsr	r25
     e6a:	87 95       	ror	r24
     e6c:	97 f9       	bld	r25, 7
     e6e:	08 95       	ret

00000e70 <pow>:
     e70:	fa 01       	movw	r30, r20
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	30 96       	adiw	r30, 0x00	; 0
     e78:	21 05       	cpc	r18, r1
     e7a:	31 05       	cpc	r19, r1
     e7c:	a1 f1       	breq	.+104    	; 0xee6 <pow+0x76>
     e7e:	61 15       	cp	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	61 f4       	brne	.+24     	; 0xe9c <pow+0x2c>
     e84:	80 38       	cpi	r24, 0x80	; 128
     e86:	bf e3       	ldi	r27, 0x3F	; 63
     e88:	9b 07       	cpc	r25, r27
     e8a:	49 f1       	breq	.+82     	; 0xede <pow+0x6e>
     e8c:	68 94       	set
     e8e:	90 38       	cpi	r25, 0x80	; 128
     e90:	81 05       	cpc	r24, r1
     e92:	61 f0       	breq	.+24     	; 0xeac <pow+0x3c>
     e94:	80 38       	cpi	r24, 0x80	; 128
     e96:	bf ef       	ldi	r27, 0xFF	; 255
     e98:	9b 07       	cpc	r25, r27
     e9a:	41 f0       	breq	.+16     	; 0xeac <pow+0x3c>
     e9c:	99 23       	and	r25, r25
     e9e:	4a f5       	brpl	.+82     	; 0xef2 <pow+0x82>
     ea0:	ff 3f       	cpi	r31, 0xFF	; 255
     ea2:	e1 05       	cpc	r30, r1
     ea4:	31 05       	cpc	r19, r1
     ea6:	21 05       	cpc	r18, r1
     ea8:	19 f1       	breq	.+70     	; 0xef0 <pow+0x80>
     eaa:	e8 94       	clt
     eac:	08 94       	sec
     eae:	e7 95       	ror	r30
     eb0:	d9 01       	movw	r26, r18
     eb2:	aa 23       	and	r26, r26
     eb4:	29 f4       	brne	.+10     	; 0xec0 <pow+0x50>
     eb6:	ab 2f       	mov	r26, r27
     eb8:	be 2f       	mov	r27, r30
     eba:	f8 5f       	subi	r31, 0xF8	; 248
     ebc:	d0 f3       	brcs	.-12     	; 0xeb2 <pow+0x42>
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <pow+0x70>
     ec0:	ff 5f       	subi	r31, 0xFF	; 255
     ec2:	70 f4       	brcc	.+28     	; 0xee0 <pow+0x70>
     ec4:	a6 95       	lsr	r26
     ec6:	e0 f7       	brcc	.-8      	; 0xec0 <pow+0x50>
     ec8:	f7 39       	cpi	r31, 0x97	; 151
     eca:	50 f0       	brcs	.+20     	; 0xee0 <pow+0x70>
     ecc:	19 f0       	breq	.+6      	; 0xed4 <pow+0x64>
     ece:	ff 3a       	cpi	r31, 0xAF	; 175
     ed0:	38 f4       	brcc	.+14     	; 0xee0 <pow+0x70>
     ed2:	9f 77       	andi	r25, 0x7F	; 127
     ed4:	9f 93       	push	r25
     ed6:	0d d0       	rcall	.+26     	; 0xef2 <pow+0x82>
     ed8:	0f 90       	pop	r0
     eda:	07 fc       	sbrc	r0, 7
     edc:	90 58       	subi	r25, 0x80	; 128
     ede:	08 95       	ret
     ee0:	46 f0       	brts	.+16     	; 0xef2 <pow+0x82>
     ee2:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	9f e3       	ldi	r25, 0x3F	; 63
     eee:	08 95       	ret
     ef0:	4f e7       	ldi	r20, 0x7F	; 127
     ef2:	9f 77       	andi	r25, 0x7F	; 127
     ef4:	5f 93       	push	r21
     ef6:	4f 93       	push	r20
     ef8:	3f 93       	push	r19
     efa:	2f 93       	push	r18
     efc:	0e 94 33 08 	call	0x1066	; 0x1066 <log>
     f00:	2f 91       	pop	r18
     f02:	3f 91       	pop	r19
     f04:	4f 91       	pop	r20
     f06:	5f 91       	pop	r21
     f08:	0e 94 cb 06 	call	0xd96	; 0xd96 <__mulsf3>
     f0c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <exp>
     f10:	29 f4       	brne	.+10     	; 0xf1c <pow+0xac>
     f12:	16 f0       	brts	.+4      	; 0xf18 <pow+0xa8>
     f14:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     f18:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_zero>
     f1c:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>

00000f20 <exp>:
     f20:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
     f24:	a8 f3       	brcs	.-22     	; 0xf10 <pow+0xa0>
     f26:	96 38       	cpi	r25, 0x86	; 134
     f28:	a0 f7       	brcc	.-24     	; 0xf12 <pow+0xa2>
     f2a:	07 f8       	bld	r0, 7
     f2c:	0f 92       	push	r0
     f2e:	e8 94       	clt
     f30:	2b e3       	ldi	r18, 0x3B	; 59
     f32:	3a ea       	ldi	r19, 0xAA	; 170
     f34:	48 eb       	ldi	r20, 0xB8	; 184
     f36:	5f e7       	ldi	r21, 0x7F	; 127
     f38:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__mulsf3_pse>
     f3c:	0f 92       	push	r0
     f3e:	0f 92       	push	r0
     f40:	0f 92       	push	r0
     f42:	4d b7       	in	r20, 0x3d	; 61
     f44:	5e b7       	in	r21, 0x3e	; 62
     f46:	0f 92       	push	r0
     f48:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <modf>
     f4c:	e4 e5       	ldi	r30, 0x54	; 84
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_powser>
     f54:	4f 91       	pop	r20
     f56:	5f 91       	pop	r21
     f58:	ef 91       	pop	r30
     f5a:	ff 91       	pop	r31
     f5c:	e5 95       	asr	r30
     f5e:	ee 1f       	adc	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	49 f0       	breq	.+18     	; 0xf76 <exp+0x56>
     f64:	fe 57       	subi	r31, 0x7E	; 126
     f66:	e0 68       	ori	r30, 0x80	; 128
     f68:	44 27       	eor	r20, r20
     f6a:	ee 0f       	add	r30, r30
     f6c:	44 1f       	adc	r20, r20
     f6e:	fa 95       	dec	r31
     f70:	e1 f7       	brne	.-8      	; 0xf6a <exp+0x4a>
     f72:	41 95       	neg	r20
     f74:	55 0b       	sbc	r21, r21
     f76:	0e 94 f5 07 	call	0xfea	; 0xfea <ldexp>
     f7a:	0f 90       	pop	r0
     f7c:	07 fe       	sbrs	r0, 7
     f7e:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <inverse>
     f82:	08 95       	ret

00000f84 <__fp_powser>:
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	1f 93       	push	r17
     f8a:	0f 93       	push	r16
     f8c:	ff 92       	push	r15
     f8e:	ef 92       	push	r14
     f90:	df 92       	push	r13
     f92:	7b 01       	movw	r14, r22
     f94:	8c 01       	movw	r16, r24
     f96:	68 94       	set
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <__fp_powser+0x22>
     f9a:	da 2e       	mov	r13, r26
     f9c:	ef 01       	movw	r28, r30
     f9e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__mulsf3x>
     fa2:	fe 01       	movw	r30, r28
     fa4:	e8 94       	clt
     fa6:	a5 91       	lpm	r26, Z+
     fa8:	25 91       	lpm	r18, Z+
     faa:	35 91       	lpm	r19, Z+
     fac:	45 91       	lpm	r20, Z+
     fae:	55 91       	lpm	r21, Z+
     fb0:	a6 f3       	brts	.-24     	; 0xf9a <__fp_powser+0x16>
     fb2:	ef 01       	movw	r28, r30
     fb4:	0e 94 12 05 	call	0xa24	; 0xa24 <__addsf3x>
     fb8:	fe 01       	movw	r30, r28
     fba:	97 01       	movw	r18, r14
     fbc:	a8 01       	movw	r20, r16
     fbe:	da 94       	dec	r13
     fc0:	69 f7       	brne	.-38     	; 0xf9c <__fp_powser+0x18>
     fc2:	df 90       	pop	r13
     fc4:	ef 90       	pop	r14
     fc6:	ff 90       	pop	r15
     fc8:	0f 91       	pop	r16
     fca:	1f 91       	pop	r17
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <inverse>:
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	80 e8       	ldi	r24, 0x80	; 128
     fdc:	9f e3       	ldi	r25, 0x3F	; 63
     fde:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__divsf3>
     fe2:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>
     fe6:	0c 94 af 08 	jmp	0x115e	; 0x115e <__fp_mpack>

00000fea <ldexp>:
     fea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
     fee:	d8 f3       	brcs	.-10     	; 0xfe6 <inverse+0x14>
     ff0:	99 23       	and	r25, r25
     ff2:	c9 f3       	breq	.-14     	; 0xfe6 <inverse+0x14>
     ff4:	94 0f       	add	r25, r20
     ff6:	51 1d       	adc	r21, r1
     ff8:	a3 f3       	brvs	.-24     	; 0xfe2 <inverse+0x10>
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	94 f0       	brlt	.+36     	; 0x1024 <ldexp+0x3a>
    1000:	59 f0       	breq	.+22     	; 0x1018 <ldexp+0x2e>
    1002:	88 23       	and	r24, r24
    1004:	32 f0       	brmi	.+12     	; 0x1012 <ldexp+0x28>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	c1 f7       	brne	.-16     	; 0x1002 <ldexp+0x18>
    1012:	9e 3f       	cpi	r25, 0xFE	; 254
    1014:	51 05       	cpc	r21, r1
    1016:	2c f7       	brge	.-54     	; 0xfe2 <inverse+0x10>
    1018:	88 0f       	add	r24, r24
    101a:	91 1d       	adc	r25, r1
    101c:	96 95       	lsr	r25
    101e:	87 95       	ror	r24
    1020:	97 f9       	bld	r25, 7
    1022:	08 95       	ret
    1024:	5f 3f       	cpi	r21, 0xFF	; 255
    1026:	ac f0       	brlt	.+42     	; 0x1052 <ldexp+0x68>
    1028:	98 3e       	cpi	r25, 0xE8	; 232
    102a:	9c f0       	brlt	.+38     	; 0x1052 <ldexp+0x68>
    102c:	bb 27       	eor	r27, r27
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	08 f4       	brcc	.+2      	; 0x103a <ldexp+0x50>
    1038:	b1 60       	ori	r27, 0x01	; 1
    103a:	93 95       	inc	r25
    103c:	c1 f7       	brne	.-16     	; 0x102e <ldexp+0x44>
    103e:	bb 0f       	add	r27, r27
    1040:	58 f7       	brcc	.-42     	; 0x1018 <ldexp+0x2e>
    1042:	11 f4       	brne	.+4      	; 0x1048 <ldexp+0x5e>
    1044:	60 ff       	sbrs	r22, 0
    1046:	e8 cf       	rjmp	.-48     	; 0x1018 <ldexp+0x2e>
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	e3 cf       	rjmp	.-58     	; 0x1018 <ldexp+0x2e>
    1052:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_szero>
    1056:	16 f0       	brts	.+4      	; 0x105c <ldexp+0x72>
    1058:	0c 94 af 08 	jmp	0x115e	; 0x115e <__fp_mpack>
    105c:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__fp_nan>
    1060:	68 94       	set
    1062:	0c 94 75 06 	jmp	0xcea	; 0xcea <__fp_inf>

00001066 <log>:
    1066:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fp_splitA>
    106a:	a8 f3       	brcs	.-22     	; 0x1056 <ldexp+0x6c>
    106c:	99 23       	and	r25, r25
    106e:	c1 f3       	breq	.-16     	; 0x1060 <ldexp+0x76>
    1070:	ae f3       	brts	.-22     	; 0x105c <ldexp+0x72>
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	1f 93       	push	r17
    1078:	0f 93       	push	r16
    107a:	ff 92       	push	r15
    107c:	c9 2f       	mov	r28, r25
    107e:	dd 27       	eor	r29, r29
    1080:	88 23       	and	r24, r24
    1082:	2a f0       	brmi	.+10     	; 0x108e <log+0x28>
    1084:	21 97       	sbiw	r28, 0x01	; 1
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	da f7       	brpl	.-10     	; 0x1084 <log+0x1e>
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e8       	ldi	r20, 0x80	; 128
    1094:	5f eb       	ldi	r21, 0xBF	; 191
    1096:	9f e3       	ldi	r25, 0x3F	; 63
    1098:	88 39       	cpi	r24, 0x98	; 152
    109a:	20 f0       	brcs	.+8      	; 0x10a4 <log+0x3e>
    109c:	80 3e       	cpi	r24, 0xE0	; 224
    109e:	38 f0       	brcs	.+14     	; 0x10ae <log+0x48>
    10a0:	21 96       	adiw	r28, 0x01	; 1
    10a2:	8f 77       	andi	r24, 0x7F	; 127
    10a4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__addsf3>
    10a8:	ec e7       	ldi	r30, 0x7C	; 124
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <log+0x50>
    10ae:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__addsf3>
    10b2:	e9 ea       	ldi	r30, 0xA9	; 169
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_powser>
    10ba:	8b 01       	movw	r16, r22
    10bc:	be 01       	movw	r22, r28
    10be:	ec 01       	movw	r28, r24
    10c0:	fb 2e       	mov	r15, r27
    10c2:	6f 57       	subi	r22, 0x7F	; 127
    10c4:	71 09       	sbc	r23, r1
    10c6:	75 95       	asr	r23
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 0b       	sbc	r24, r24
    10cc:	99 0b       	sbc	r25, r25
    10ce:	0e 94 16 06 	call	0xc2c	; 0xc2c <__floatsisf>
    10d2:	28 e1       	ldi	r18, 0x18	; 24
    10d4:	32 e7       	ldi	r19, 0x72	; 114
    10d6:	41 e3       	ldi	r20, 0x31	; 49
    10d8:	5f e3       	ldi	r21, 0x3F	; 63
    10da:	0e 94 de 06 	call	0xdbc	; 0xdbc <__mulsf3x>
    10de:	af 2d       	mov	r26, r15
    10e0:	98 01       	movw	r18, r16
    10e2:	ae 01       	movw	r20, r28
    10e4:	ff 90       	pop	r15
    10e6:	0f 91       	pop	r16
    10e8:	1f 91       	pop	r17
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	0e 94 12 05 	call	0xa24	; 0xa24 <__addsf3x>
    10f2:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_round>

000010f6 <modf>:
    10f6:	fa 01       	movw	r30, r20
    10f8:	dc 01       	movw	r26, r24
    10fa:	aa 0f       	add	r26, r26
    10fc:	bb 1f       	adc	r27, r27
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	bf 57       	subi	r27, 0x7F	; 127
    1104:	28 f4       	brcc	.+10     	; 0x1110 <modf+0x1a>
    1106:	22 27       	eor	r18, r18
    1108:	33 27       	eor	r19, r19
    110a:	44 27       	eor	r20, r20
    110c:	50 78       	andi	r21, 0x80	; 128
    110e:	20 c0       	rjmp	.+64     	; 0x1150 <modf+0x5a>
    1110:	b7 51       	subi	r27, 0x17	; 23
    1112:	90 f4       	brcc	.+36     	; 0x1138 <modf+0x42>
    1114:	ab 2f       	mov	r26, r27
    1116:	00 24       	eor	r0, r0
    1118:	46 95       	lsr	r20
    111a:	37 95       	ror	r19
    111c:	27 95       	ror	r18
    111e:	01 1c       	adc	r0, r1
    1120:	a3 95       	inc	r26
    1122:	d2 f3       	brmi	.-12     	; 0x1118 <modf+0x22>
    1124:	00 20       	and	r0, r0
    1126:	71 f0       	breq	.+28     	; 0x1144 <modf+0x4e>
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	44 1f       	adc	r20, r20
    112e:	b3 95       	inc	r27
    1130:	da f3       	brmi	.-10     	; 0x1128 <modf+0x32>
    1132:	0e d0       	rcall	.+28     	; 0x1150 <modf+0x5a>
    1134:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__subsf3>
    1138:	61 30       	cpi	r22, 0x01	; 1
    113a:	71 05       	cpc	r23, r1
    113c:	a0 e8       	ldi	r26, 0x80	; 128
    113e:	8a 07       	cpc	r24, r26
    1140:	b9 46       	sbci	r27, 0x69	; 105
    1142:	30 f4       	brcc	.+12     	; 0x1150 <modf+0x5a>
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	66 27       	eor	r22, r22
    114a:	77 27       	eor	r23, r23
    114c:	88 27       	eor	r24, r24
    114e:	90 78       	andi	r25, 0x80	; 128
    1150:	30 96       	adiw	r30, 0x00	; 0
    1152:	21 f0       	breq	.+8      	; 0x115c <modf+0x66>
    1154:	20 83       	st	Z, r18
    1156:	31 83       	std	Z+1, r19	; 0x01
    1158:	42 83       	std	Z+2, r20	; 0x02
    115a:	53 83       	std	Z+3, r21	; 0x03
    115c:	08 95       	ret

0000115e <__fp_mpack>:
    115e:	9f 3f       	cpi	r25, 0xFF	; 255
    1160:	31 f0       	breq	.+12     	; 0x116e <__fp_mpack_finite+0xc>

00001162 <__fp_mpack_finite>:
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	20 f4       	brcc	.+8      	; 0x116e <__fp_mpack_finite+0xc>
    1166:	87 95       	ror	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	b7 95       	ror	r27
    116e:	88 0f       	add	r24, r24
    1170:	91 1d       	adc	r25, r1
    1172:	96 95       	lsr	r25
    1174:	87 95       	ror	r24
    1176:	97 f9       	bld	r25, 7
    1178:	08 95       	ret

0000117a <__udivmodsi4>:
    117a:	a1 e2       	ldi	r26, 0x21	; 33
    117c:	1a 2e       	mov	r1, r26
    117e:	aa 1b       	sub	r26, r26
    1180:	bb 1b       	sub	r27, r27
    1182:	fd 01       	movw	r30, r26
    1184:	0d c0       	rjmp	.+26     	; 0x11a0 <__udivmodsi4_ep>

00001186 <__udivmodsi4_loop>:
    1186:	aa 1f       	adc	r26, r26
    1188:	bb 1f       	adc	r27, r27
    118a:	ee 1f       	adc	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	a2 17       	cp	r26, r18
    1190:	b3 07       	cpc	r27, r19
    1192:	e4 07       	cpc	r30, r20
    1194:	f5 07       	cpc	r31, r21
    1196:	20 f0       	brcs	.+8      	; 0x11a0 <__udivmodsi4_ep>
    1198:	a2 1b       	sub	r26, r18
    119a:	b3 0b       	sbc	r27, r19
    119c:	e4 0b       	sbc	r30, r20
    119e:	f5 0b       	sbc	r31, r21

000011a0 <__udivmodsi4_ep>:
    11a0:	66 1f       	adc	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	1a 94       	dec	r1
    11aa:	69 f7       	brne	.-38     	; 0x1186 <__udivmodsi4_loop>
    11ac:	60 95       	com	r22
    11ae:	70 95       	com	r23
    11b0:	80 95       	com	r24
    11b2:	90 95       	com	r25
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	bd 01       	movw	r22, r26
    11ba:	cf 01       	movw	r24, r30
    11bc:	08 95       	ret

000011be <_exit>:
    11be:	f8 94       	cli

000011c0 <__stop_program>:
    11c0:	ff cf       	rjmp	.-2      	; 0x11c0 <__stop_program>
